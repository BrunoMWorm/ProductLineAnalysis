
==================== FINAL INTERFACE ====================
2019-03-07 05:03:02.062658 UTC

interface SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList [hpc] 8002
  interface hash: 2b5a4ae3e7135e6c9915c7d3186050b5
  ABI hash: c1b26b09fe7db667b269ae39cb073b9e
  export-list hash: 71b1d4bd3b44e892a00c5cd23d7d3cc5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 508c6afaecff301ec255521150ad3e7a
  sig of: Nothing
  used TH splices: False
  where
exports:
  Deep.VList.mkVList
  Deep.VList.vCons
  Deep.VList.vNil
  Deep.VList.vhead
  Deep.VList.vlength
  Deep.VList.vmap
  Deep.VList.vtail
  Deep.VList.VList
module dependencies: Prop PropBDD SPL
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      cudd-0.1.0.4@cudd-0.1.0.4-FSAkhUabwhMcZB0faAolK
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      generic-deriving-1.11.1@generic-deriving-1.11.1-KikO253wqy4LP00rofnfq3
                      ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4
                      hashtables-1.2.1.0@hashtables-1.2.1.0-Gn8SuLgl5kj6IL9Wq6eBAx
                      integer-gmp-1.0.0.1
                      parallel-3.2.1.0@parallel-3.2.1.0-CNlrARikHUx7Z7NHwpxRS3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  Prop ea9d819b7a09aea084b952b45670b988
  exports: 50f7865bcd5c4145374284e5b418d0c4
import  -/  SPL fe488233b733de36632706b6b8af2a83
  exports: a2d28348b799da63d289715ec341de8a
  Var dce56e5e5bca4af310ced24075ea7a50
  Var 3d3b229fbc24d03635a863a001709584
  liftV d3d571acbb557897923fbe19b0074cfe
  mkVarT 3d3b229fbc24d03635a863a001709584
  restrict 48d6d5d2ea9f40bc29e58b54d3a7fea4
  undefinedAt b35ff8327766aba4a3531780a3f88ce6
  union 23a5a9173b49ea7f422cf80e0f714d5a
  union2 24a8535807805d6e17d673c7c7172227
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
4f295f52b065ad701d0eba68bb988a4d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Deep.VList.$trModule2
                   Deep.VList.$trModule1) -}
46bfa3622aba0cfe098f4ee2d1872bce
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Deep.VList"#) -}
3d60d364bcbbe5ce53603cc15136d40a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG"#) -}
ac186decb445ccfa5fa66143fd1a79ae
  type VList a = SPL.Var [SPL.Var a]
9cf0ff7ebe2a8f18008d23bd2b2c8699
  mkVList :: [SPL.Var a] -> Deep.VList.VList a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (xs :: [SPL.Var a]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.mkVList} True True} Deep.VList.mkVList1
                                                                                             @ a
                                                                                             xs) -}
b761766d689be38a24d8fe0e70163bc3
  mkVList1 :: [SPL.Var a] -> Deep.VList.VList a
  {- Arity: 1, Strictness: <S,1*U> -}
a6ca7a897c492215e3e2e1fb7db016f0
  vCons :: SPL.Var a -> Deep.VList.VList a -> Deep.VList.VList a
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ @ a (x :: SPL.Var a) (xs :: Deep.VList.VList a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons} True True} let {
                                                                                           ds :: [SPL.Val
                                                                                                    [SPL.Var
                                                                                                       a]]
                                                                                           = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons.def} True True} letrec {
                                                                                                                                                                           go :: [([SPL.Var
                                                                                                                                                                                      a],
                                                                                                                                                                                   SPL.PresenceCondition)]
                                                                                                                                                                                 -> [SPL.Val
                                                                                                                                                                                       [SPL.Var
                                                                                                                                                                                          a]]
                                                                                                                                                                             {- Arity: 1,
                                                                                                                                                                                Strictness: <S,1*U> -}
                                                                                                                                                                           = \ (ds1 :: [([SPL.Var
                                                                                                                                                                                            a],
                                                                                                                                                                                         SPL.PresenceCondition)]) ->
                                                                                                                                                                             case ds1 of wild {
                                                                                                                                                                               []
                                                                                                                                                                               -> GHC.Types.[]
                                                                                                                                                                                    @ (SPL.Val
                                                                                                                                                                                         [SPL.Var
                                                                                                                                                                                            a])
                                                                                                                                                                               : y ys
                                                                                                                                                                               -> case y of wild1 { (,) xs'' xspc ->
                                                                                                                                                                                  {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons.def.r'} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons.def.(...)} True True} SPL.cond'2
                                                                                                                                                                                                                                                                                                                                                           @ a
                                                                                                                                                                                                                                                                                                                                                           xspc
                                                                                                                                                                                                                                                                                                                                                           x of wild2 {
                                                                                                                                                                                                                                                                    []
                                                                                                                                                                                                                                                                    -> go
                                                                                                                                                                                                                                                                         ys
                                                                                                                                                                                                                                                                    : ds2 ds3
                                                                                                                                                                                                                                                                    -> GHC.Types.:
                                                                                                                                                                                                                                                                         @ (SPL.Val
                                                                                                                                                                                                                                                                              [SPL.Var
                                                                                                                                                                                                                                                                                 a])
                                                                                                                                                                                                                                                                         (GHC.Types.:
                                                                                                                                                                                                                                                                            @ (SPL.Var
                                                                                                                                                                                                                                                                                 a)
                                                                                                                                                                                                                                                                            ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons.def.r} True False} wild2)
                                                                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                                                                            (Sym (SPL.N:Var[0]
                                                                                                                                                                                                                                                                                      <a>_R))
                                                                                                                                                                                                                                                                            xs'',
                                                                                                                                                                                                                                                                          xspc)
                                                                                                                                                                                                                                                                         (go
                                                                                                                                                                                                                                                                            ys) } } }
                                                                                                                                                                         } in
                                                                                                                                                                         go
                                                                                                                                                                           xs
                                                                                                                                                                             `cast`
                                                                                                                                                                           (SPL.N:Var[0]
                                                                                                                                                                                <[SPL.Var
                                                                                                                                                                                    a]>_R)
                                                                                         } in
                                                                                         let {
                                                                                           ds1 :: [([SPL.Var
                                                                                                       a],
                                                                                                    PropBDD.Prop)]
                                                                                           = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vCons.undef} True True} SPL.cond'2
                                                                                                                                                                             @ [SPL.Var
                                                                                                                                                                                  a]
                                                                                                                                                                             (SPL.undefinedAt
                                                                                                                                                                                @ a
                                                                                                                                                                                x)
                                                                                                                                                                             xs
                                                                                         } in
                                                                                         ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.union} True True} GHC.Base.++
                                                                                                                                                             @ ([SPL.Var
                                                                                                                                                                   a],
                                                                                                                                                                SPL.PresenceCondition)
                                                                                                                                                             ds
                                                                                                                                                             ds1)
                                                                                           `cast`
                                                                                         (Sym (SPL.N:Var[0]
                                                                                                   <[SPL.Var
                                                                                                       a]>_R))) -}
df4b08cf3f71bda90c2652b191cee735
  vNil :: SPL.Var [t]
  {- Unfolding: (\ @ t ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vNil} True True} SPL.mkVarT
                                                                                          @ [t]
                                                                                          (GHC.Types.[]
                                                                                             @ t)) -}
d2112fc59c113a44dcef9c11ad1f75f9
  vhead :: Deep.VList.VList a -> SPL.Var a
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ @ a (xs :: Deep.VList.VList a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vhead} True True} let {
                                                                                           ds :: SPL.Var
                                                                                                   (SPL.Var
                                                                                                      a)
                                                                                           = SPL.liftV
                                                                                               @ [SPL.Var
                                                                                                    a]
                                                                                               @ (SPL.Var
                                                                                                    a)
                                                                                               (GHC.List.head
                                                                                                  @ (SPL.Var
                                                                                                       a))
                                                                                               xs
                                                                                         } in
                                                                                         {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.union2} True True} let {
                                                                                                                                                             xs1 :: [SPL.Var
                                                                                                                                                                       a]
                                                                                                                                                             = GHC.Base.map
                                                                                                                                                                 @ (SPL.Var
                                                                                                                                                                      a,
                                                                                                                                                                    SPL.PresenceCondition)
                                                                                                                                                                 @ (SPL.Var
                                                                                                                                                                      a)
                                                                                                                                                                 (SPL.union4
                                                                                                                                                                    @ a)
                                                                                                                                                                 ds
                                                                                                                                                                   `cast`
                                                                                                                                                                 (SPL.N:Var[0]
                                                                                                                                                                      <SPL.Var
                                                                                                                                                                         a>_R)
                                                                                                                                                           } in
                                                                                                                                                           ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.unions} True True} SPL.union3
                                                                                                                                                                                                                                @ a
                                                                                                                                                                                                                                xs1)
                                                                                                                                                             `cast`
                                                                                                                                                           (Sym (SPL.N:Var[0]
                                                                                                                                                                     <a>_R))) -}
d43e5fb40f003910ccb4663f1f206a1a
  vlength :: Deep.VList.VList a -> SPL.Var GHC.Types.Int
  {- Unfolding: (\ @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vlength} True True} SPL.liftV
                                                                                             @ [SPL.Var
                                                                                                  a]
                                                                                             @ GHC.Types.Int
                                                                                             (GHC.List.length
                                                                                                @ (SPL.Var
                                                                                                     a))) -}
e8de500a8ead11971a7572ebdda45faa
  vmap ::
    SPL.Var (a -> b) -> Deep.VList.VList a -> Deep.VList.VList b
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Deep.VList.vmap1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <SPL.Var (a -> b)>_R
                 ->_R <Deep.VList.VList a>_R
                 ->_R Sym (SPL.N:Var[0] <[SPL.Var b]>_R)) -}
08ca98c8592979ef5d290b4a0d252a26
  vmap1 ::
    SPL.Var (a -> b) -> Deep.VList.VList a -> [SPL.Val [SPL.Var b]]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f :: SPL.Var (a -> b))
                   (xs :: Deep.VList.VList a) ->
                 let {
                   lvl :: SPL.Var a -> SPL.Var b
                     {- Arity: 1, Strictness: <L,U>,
                        Unfolding: InlineRule (1, True, False)
                                   (\ (x :: SPL.Var a) ->
                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vmap.\} True True} SPL.$fApplicativeVar_$c<*>
                                                                                                               @ a
                                                                                                               @ b
                                                                                                               f
                                                                                                               x) -}
                   = \ (x :: SPL.Var a) ->
                     {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vmap.\} True True} SPL.$fApplicativeVar_$c<*>
                                                                                                @ a
                                                                                                @ b
                                                                                                f
                                                                                                x
                 } in
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vmap} True True} letrec {
                                                                                          go :: [([SPL.Var
                                                                                                     a],
                                                                                                  SPL.PresenceCondition)]
                                                                                                -> [SPL.Val
                                                                                                      [SPL.Var
                                                                                                         b]]
                                                                                            {- Arity: 1,
                                                                                               Strictness: <S,1*U> -}
                                                                                          = \ (ds :: [([SPL.Var
                                                                                                          a],
                                                                                                       SPL.PresenceCondition)]) ->
                                                                                            case ds of wild {
                                                                                              []
                                                                                              -> GHC.Types.[]
                                                                                                   @ (SPL.Val
                                                                                                        [SPL.Var
                                                                                                           b])
                                                                                              : y ys
                                                                                              -> case y of wild1 { (,) xs'' pc ->
                                                                                                 GHC.Types.:
                                                                                                   @ (SPL.Val
                                                                                                        [SPL.Var
                                                                                                           b])
                                                                                                   (GHC.Base.map
                                                                                                      @ (SPL.Var
                                                                                                           a)
                                                                                                      @ (SPL.Var
                                                                                                           b)
                                                                                                      lvl
                                                                                                      xs'',
                                                                                                    pc)
                                                                                                   (go
                                                                                                      ys) } }
                                                                                        } in
                                                                                        go
                                                                                          xs
                                                                                            `cast`
                                                                                          (SPL.N:Var[0]
                                                                                               <[SPL.Var
                                                                                                   a]>_R)) -}
a7a773cdc70d13aa67d845fe9d2a4664
  vtail :: Deep.VList.VList a -> Deep.VList.VList a
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Deep.VList.VList a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Deep.VList.vtail} True True} SPL.liftV
                                                                                           @ [SPL.Var
                                                                                                a]
                                                                                           @ [SPL.Var
                                                                                                a]
                                                                                           (GHC.List.tail
                                                                                              @ (SPL.Var
                                                                                                   a))
                                                                                           xs) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

