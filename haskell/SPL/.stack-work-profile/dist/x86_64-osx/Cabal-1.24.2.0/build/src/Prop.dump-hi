
==================== FINAL INTERFACE ====================
2019-02-22 02:31:28.851282 UTC

interface SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop [hpc] 8002
  interface hash: 1572bd1d85580278402762f49299c1b5
  ABI hash: ea9d819b7a09aea084b952b45670b988
  export-list hash: 50f7865bcd5c4145374284e5b418d0c4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8073dc03a284eeb4b69023ff166917b7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Prop.atom
  Prop.cacheSize
  Prop.checkSAT
  Prop.conf
  Prop.conj
  Prop.ctxt
  Prop.disj
  Prop.ff
  Prop.impl
  Prop.implies
  Prop.mkProp
  Prop.mkUniverse
  Prop.mkZ3Script
  Prop.neg
  Prop.sat
  Prop.satCache
  Prop.solver
  Prop.tautology
  Prop.tt
  Prop.unsat
  Prop.Prop{Prop.P}
  Prop.SATCache
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      generic-deriving-1.11.1@generic-deriving-1.11.1-KikO253wqy4LP00rofnfq3
                      ghc-prim-0.5.0.0
                      hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4
                      hashtables-1.2.1.0@hashtables-1.2.1.0-Gn8SuLgl5kj6IL9Wq6eBAx
                      integer-gmp-1.0.0.1
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
                      z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Generic
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Compose base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Primitive
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Unboxed.Base
import  -/  base-4.9.1.0:Control.Monad.IO.Class 1a4384f66ee999caf5366398edb6ca7b
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  generic-deriving-1.11.1@generic-deriving-1.11.1-KikO253wqy4LP00rofnfq3:Generics.Deriving 2023eaca30c8d8cda0790051eab39b90
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable 41705d4e014c164fb1ffd440391128c3
import  -/  hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Class 2025ea24b3f4e11576c6c7f4814af3b3
import  -/  hashtables-1.2.1.0@hashtables-1.2.1.0-Gn8SuLgl5kj6IL9Wq6eBAx:Data.HashTable.IO 16e58803a333fac93502ac95f5106568
import  -/  z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base 28aa0cd7b702c1f3e3722230356410e0
344b8466ebf26aca95e92dceb14e38a2
  $fEqProp :: GHC.Classes.Eq Prop.Prop
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Prop.Prop Prop.$fEqProp_$c== Prop.$fEqProp_$c/= -}
344b8466ebf26aca95e92dceb14e38a2
  $fEqProp_$c/= :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Prop.Prop) (y :: Prop.Prop) ->
                 GHC.Classes.not (Prop.$fEqProp_$c== x y)) -}
344b8466ebf26aca95e92dceb14e38a2
  $fEqProp_$c== :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Prop.Prop) (ds1 :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True True} case ds of wild { Prop.P ds2 a1 ->
                                                                                case ds1 of wild1 { Prop.P ds3 a2 ->
                                                                                GHC.Base.eqString
                                                                                  a1
                                                                                  a2 } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fHashableProp :: Data.Hashable.Class.Hashable Prop.Prop
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Prop.Prop
                  Prop.$fHashableProp_$chashWithSalt
                  Prop.$fHashableProp_$chash -}
344b8466ebf26aca95e92dceb14e38a2
  $fHashableProp_$chash :: Prop.Prop -> GHC.Types.Int
  {- Unfolding: ({__scc {hashable-1.2.5.0@hashable-1.2.5.0-F4MWeNuv2sjJRqBd2T5ul4:Data.Hashable.Class.hash} True True} Prop.$fHashableProp_$chashWithSalt
                                                                                                                         Data.Hashable.Class.defaultSalt) -}
344b8466ebf26aca95e92dceb14e38a2
  $fHashableProp_$chashWithSalt ::
    GHC.Types.Int -> Prop.Prop -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><S,1*U(A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ds :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.hashWithSalt} True True} case ds of wild { Prop.P ds1 s ->
                                                                                          Data.Hashable.Class.hashWithSalt1_$s$chashWithSalt
                                                                                            x
                                                                                            s }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp :: GHC.Classes.Ord Prop.Prop
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Prop.Prop
                  Prop.$fEqProp
                  Prop.$fOrdProp_$ccompare
                  Prop.$fOrdProp_$c<
                  Prop.$fOrdProp_$c<=
                  Prop.$fOrdProp_$c>
                  Prop.$fOrdProp_$c>=
                  Prop.$fOrdProp_$cmax
                  Prop.$fOrdProp_$cmin -}
6e5dadfdaf432cbeea77102cbf4eaf7b
  $fOrdProp1 :: Z3.Base.AST
  {- Strictness: x -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$c< :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U)><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Prop.Prop) (ds1 :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} True True} case ds of wild { Prop.P ds2 a1 ->
                                                                               case ds1 of wild1 { Prop.P ds3 a2 ->
                                                                               GHC.Classes.$fOrd[]_$s$c<1
                                                                                 a1
                                                                                 a2 } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$c<= :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,U)><S(LS),1*U(A,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 -> Prop.$w$c<= ww2 ww5 } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$c> :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(LS),1*U(A,U)><S(LS),1*U(A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Prop.Prop) (y :: Prop.Prop) ->
                 case Prop.$fOrdProp_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$c>= :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(LS),1*U(A,U)><S(LS),1*U(A,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Prop.Prop) (y :: Prop.Prop) ->
                 case Prop.$fOrdProp_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$ccompare :: Prop.Prop -> Prop.Prop -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S(LS),1*U(A,U)><S(LS),1*U(A,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 -> Prop.$w$ccompare ww2 ww5 } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$cmax :: Prop.Prop -> Prop.Prop -> Prop.Prop
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 ->
                 let {
                   x :: Prop.Prop = Prop.P ww1 ww2
                 } in
                 case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} True False} x of wild { Prop.P ds a1 ->
                 case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} False True} GHC.Classes.$fOrd[]_$s$c<1
                                                                                                                                                       a1
                                                                                                                                                       ww5 of wild1 {
                   GHC.Types.False
                   -> case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True True} GHC.Base.eqString
                                                                                                                                                            a1
                                                                                                                                                            ww5 of wild2 {
                        GHC.Types.False -> Prop.P ds a1 GHC.Types.True -> Prop.P ww4 ww5 }
                   GHC.Types.True -> Prop.P ww4 ww5 } } } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fOrdProp_$cmin :: Prop.Prop -> Prop.Prop -> Prop.Prop
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS),1*U(U,U)><S(LS),1*U(U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 ->
                 let {
                   x :: Prop.Prop = Prop.P ww1 ww2
                 } in
                 case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} True False} x of wild { Prop.P ds a1 ->
                 case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} False True} GHC.Classes.$fOrd[]_$s$c<1
                                                                                                                                                       a1
                                                                                                                                                       ww5 of wild1 {
                   GHC.Types.False
                   -> case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True True} GHC.Base.eqString
                                                                                                                                                            a1
                                                                                                                                                            ww5 of wild2 {
                        GHC.Types.False -> Prop.P ww4 ww5 GHC.Types.True -> Prop.P ds a1 }
                   GHC.Types.True -> Prop.P ds a1 } } } }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fShowProp :: GHC.Show.Show Prop.Prop
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Prop.Prop
                  Prop.$fShowProp_$cshowsPrec
                  Prop.$fShowProp_$cshow
                  Prop.$fShowProp_$cshowList -}
344b8466ebf26aca95e92dceb14e38a2
  $fShowProp1 :: Prop.Prop -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (x :: Prop.Prop) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.show} True True} case x of wild { Prop.P ds s1 ->
                                                                                     s1 })
                   s) -}
344b8466ebf26aca95e92dceb14e38a2
  $fShowProp_$cshow :: Prop.Prop -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.show} True True} case ds of wild { Prop.P ds1 s ->
                                                                                  s }) -}
344b8466ebf26aca95e92dceb14e38a2
  $fShowProp_$cshowList :: [Prop.Prop] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ls :: [Prop.Prop]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Prop.Prop Prop.$fShowProp1 ls s) -}
344b8466ebf26aca95e92dceb14e38a2
  $fShowProp_$cshowsPrec ::
    GHC.Types.Int -> Prop.Prop -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(LS),1*U(A,1*U)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int) (x :: Prop.Prop) (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.show} True True} case x of wild { Prop.P ds1 s1 ->
                                                                                        s1 }))
                   s) -}
9376b567bc46bbc96f38821807e2388e
  $tc'P :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12420769428847630162##
                   14501034589862241273##
                   Prop.$trModule
                   Prop.$tc'P1) -}
2cc56a1945fee9e30bb36db7e263e9c1
  $tc'P1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'P"#) -}
48bd93f368ddafc4a90d0763c2fb81e4
  $tcProp :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9870276528123883124##
                   4640244825217403452##
                   Prop.$trModule
                   Prop.$trModule1) -}
01c74d4074e504ceb458843cceb3ebef
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Prop.$trModule2 Prop.$trModule1) -}
60af67dcb77277c7565ff28505441b2d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Prop"#) -}
048440be7afc418d20da5a18b82ff9dc
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG"#) -}
2cd80212eb01ba93c84e82c2d1274436
  $w$c<= :: GHC.Base.String -> GHC.Base.String -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} False True} GHC.Classes.$fOrd[]_$s$c<1
                                                                                                                                                                                                                     ww
                                                                                                                                                                                                                     ww1 of wild {
                                                                                                                                                 GHC.Types.False
                                                                                                                                                 -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True True} GHC.Base.eqString
                                                                                                                                                                                                                     ww
                                                                                                                                                                                                                     ww1
                                                                                                                                                 GHC.Types.True
                                                                                                                                                 -> GHC.Types.True }) -}
344b8466ebf26aca95e92dceb14e38a2
  $w$ccompare ::
    GHC.Base.String -> GHC.Base.String -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                        ww
                                                                                                                                                        ww1 of wild {
                                                                                   GHC.Types.False
                                                                                   -> let {
                                                                                        wild1 :: Prop.Prop
                                                                                        = Prop.P
                                                                                            Prop.$fOrdProp1
                                                                                            ww
                                                                                      } in
                                                                                      case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} True False} wild1 of wild2 { Prop.P ds a1 ->
                                                                                      case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<} False True} GHC.Classes.$fOrd[]_$s$c<1
                                                                                                                                                                                                                            a1
                                                                                                                                                                                                                            ww1 of wild3 {
                                                                                        GHC.Types.False
                                                                                        -> case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.<=} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True True} GHC.Base.eqString
                                                                                                                                                                                                                                 a1
                                                                                                                                                                                                                                 ww1 of wild4 {
                                                                                             GHC.Types.False
                                                                                             -> GHC.Types.GT
                                                                                             GHC.Types.True
                                                                                             -> GHC.Types.LT }
                                                                                        GHC.Types.True
                                                                                        -> GHC.Types.LT } }
                                                                                   GHC.Types.True
                                                                                   -> GHC.Types.EQ }) -}
954e88099b34474e041a73091cf0eed9
  $watom :: GHC.Base.String -> (# Z3.Base.AST, GHC.Base.String #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) ->
                 case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.atom} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                             (case GHC.Magic.runRW#
                                                                                                                                                                     @ 'GHC.Types.PtrRepLifted
                                                                                                                                                                     @ Z3.Base.AST
                                                                                                                                                                     (\ (s :: GHC.Prim.State#
                                                                                                                                                                                GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                                                                      case GHC.Prim.noDuplicate#
                                                                                                                                                                             s of s' { DEFAULT ->
                                                                                                                                                                      {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.mkFreshBoolVar} True False} {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.mkFreshBoolVar} False True} case (Z3.Base.mkBoolSort
                                                                                                                                                                                                                                                                                                                                                        Prop.ctxt)
                                                                                                                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                                                                                                                     (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                                                                                                                                          <Z3.Base.Sort>_R)
                                                                                                                                                                                                                                                                                                                                                       s' of ds1 { (#,#) ipv ipv1 ->
                                                                                                                                                                                                                                                                                                                                                (Z3.Base.mkFreshVar
                                                                                                                                                                                                                                                                                                                                                   Prop.ctxt
                                                                                                                                                                                                                                                                                                                                                   w
                                                                                                                                                                                                                                                                                                                                                   ipv1)
                                                                                                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                                                                                                (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                                                                                                                                     <Z3.Base.AST>_R)
                                                                                                                                                                                                                                                                                                                                                  ipv } }) of ds { (#,#) ipv ipv1 ->
                                                                                                                                                              ipv1 })
                                                                                                                                                             w of ww { Prop.P ww1 ww2 ->
                 (# ww1, ww2 #) }) -}
9695c9e643f8048b5a3c2b88ab286121
  $wcheckSAT :: Z3.Base.AST -> GHC.Base.String -> Z3.Base.Result
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Z3.Base.AST) (ww1 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.checkSAT} True True} case GHC.Magic.runRW#
                                                                                             @ 'GHC.Types.PtrRepLifted
                                                                                             @ Z3.Base.Result
                                                                                             (\ (s :: GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld)[OneShot] ->
                                                                                              case GHC.Prim.noDuplicate#
                                                                                                     s of s' { DEFAULT ->
                                                                                              let {
                                                                                                wild :: Prop.Prop
                                                                                                = Prop.P
                                                                                                    ww
                                                                                                    ww1
                                                                                              } in
                                                                                              case (({__scc {hashtables-1.2.1.0@hashtables-1.2.1.0-Gn8SuLgl5kj6IL9Wq6eBAx:Data.HashTable.ST.Basic.lookup} True True} Data.HashTable.ST.Basic.lookup
                                                                                                                                                                                                                       @ Prop.Prop
                                                                                                                                                                                                                       @ GHC.Prim.RealWorld
                                                                                                                                                                                                                       @ Z3.Base.Result
                                                                                                                                                                                                                       Prop.$fEqProp
                                                                                                                                                                                                                       Prop.$fHashableProp)
                                                                                                      Prop.satCache
                                                                                                        `cast`
                                                                                                      (Data.HashTable.ST.Basic.HashTable
                                                                                                         (Control.Monad.Primitive.D:R:PrimStateIO[0])
                                                                                                         <Prop.Prop>_R
                                                                                                         <Z3.Base.Result>_R)_R
                                                                                                      wild)
                                                                                                     `cast`
                                                                                                   (GHC.ST.N:ST[0]
                                                                                                        <GHC.Prim.RealWorld>_N
                                                                                                        <GHC.Base.Maybe
                                                                                                           Z3.Base.Result>_R)
                                                                                                     s' of ds1 { (#,#) ipv ipv1 ->
                                                                                              case ipv1 of wild1 {
                                                                                                GHC.Base.Nothing
                                                                                                -> case Prop.checkSAT4
                                                                                                          `cast`
                                                                                                        (GHC.Types.N:IO[0]
                                                                                                             <()>_R)
                                                                                                          ipv of ds2 { (#,#) ipv2 ipv3 ->
                                                                                                   case (Z3.Base.solverAssertCnstr
                                                                                                           Prop.ctxt
                                                                                                           Prop.solver
                                                                                                           ww)
                                                                                                          `cast`
                                                                                                        (GHC.Types.N:IO[0]
                                                                                                             <()>_R)
                                                                                                          ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                                                                                   case Prop.checkSAT3
                                                                                                          `cast`
                                                                                                        (GHC.Types.N:IO[0]
                                                                                                             <Z3.Base.Result>_R)
                                                                                                          ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                                                                                                   case Prop.checkSAT1
                                                                                                          `cast`
                                                                                                        (GHC.Types.N:IO[0]
                                                                                                             <()>_R)
                                                                                                          ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                                                                                                   case (({__scc {hashtables-1.2.1.0@hashtables-1.2.1.0-Gn8SuLgl5kj6IL9Wq6eBAx:Data.HashTable.ST.Basic.insert} True True} Data.HashTable.ST.Basic.insert
                                                                                                                                                                                                                            @ Prop.Prop
                                                                                                                                                                                                                            @ GHC.Prim.RealWorld
                                                                                                                                                                                                                            @ Z3.Base.Result
                                                                                                                                                                                                                            Prop.$fEqProp
                                                                                                                                                                                                                            Prop.$fHashableProp)
                                                                                                           Prop.satCache
                                                                                                             `cast`
                                                                                                           (Data.HashTable.ST.Basic.HashTable
                                                                                                              (Control.Monad.Primitive.D:R:PrimStateIO[0])
                                                                                                              <Prop.Prop>_R
                                                                                                              <Z3.Base.Result>_R)_R
                                                                                                           wild
                                                                                                           ipv7)
                                                                                                          `cast`
                                                                                                        (GHC.ST.N:ST[0]
                                                                                                             <GHC.Prim.RealWorld>_N
                                                                                                             <()>_R)
                                                                                                          ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                                                                                                   (# ipv10,
                                                                                                      ipv7 #) } } } } }
                                                                                                GHC.Base.Just r'
                                                                                                -> (# ipv,
                                                                                                      r' #) } } }) of ds { (#,#) ipv ipv1 ->
                                                                                      ipv1 }) -}
d6b134d5edbaac853d1f55f202a6e2a0
  $wimpl ::
    Z3.Base.AST
    -> GHC.Base.String -> Z3.Base.AST -> GHC.Base.String -> Prop.Prop
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Z3.Base.AST)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Z3.Base.AST)
                   (ww3 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.impl} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case Prop.ff of wild { Prop.P ds a2 ->
                                                                                                                                                  case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                         ww1
                                                                                                                                                                                                                         a2 of wild1 {
                                                                                                                                                    GHC.Types.False
                                                                                                                                                    -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case Prop.tt of wild2 { Prop.P ds1 a1 ->
                                                                                                                                                                                                                       case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                                                                              ww1
                                                                                                                                                                                                                                                                                              a1 of wild3 {
                                                                                                                                                                                                                         GHC.Types.False
                                                                                                                                                                                                                         -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                                                                                                                                                   ww3
                                                                                                                                                                                                                                                                                                                                                                   a1 of wild4 {
                                                                                                                                                                                                                                                                                              GHC.Types.False
                                                                                                                                                                                                                                                                                              -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                                                                                                                                                                                                                                       (case GHC.Magic.runRW#
                                                                                                                                                                                                                                                                                                                                                                               @ 'GHC.Types.PtrRepLifted
                                                                                                                                                                                                                                                                                                                                                                               @ Z3.Base.AST
                                                                                                                                                                                                                                                                                                                                                                               (\ (s :: GHC.Prim.State#
                                                                                                                                                                                                                                                                                                                                                                                          GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                                                                                                                                                                                                                                                                                case GHC.Prim.noDuplicate#
                                                                                                                                                                                                                                                                                                                                                                                       s of s' { DEFAULT ->
                                                                                                                                                                                                                                                                                                                                                                                (Z3.Base.mkImplies
                                                                                                                                                                                                                                                                                                                                                                                   Prop.ctxt
                                                                                                                                                                                                                                                                                                                                                                                   ww
                                                                                                                                                                                                                                                                                                                                                                                   ww2)
                                                                                                                                                                                                                                                                                                                                                                                  `cast`
                                                                                                                                                                                                                                                                                                                                                                                (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                                                                                                                                                                     <Z3.Base.AST>_R)
                                                                                                                                                                                                                                                                                                                                                                                  s' }) of ds2 { (#,#) ipv ipv1 ->
                                                                                                                                                                                                                                                                                                                                                                        ipv1 })
                                                                                                                                                                                                                                                                                                                                                                       (GHC.Base.++
                                                                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char
                                                                                                                                                                                                                                                                                                                                                                          ww1
                                                                                                                                                                                                                                                                                                                                                                          (GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                                                                                                                             " => "#
                                                                                                                                                                                                                                                                                                                                                                             ww3))
                                                                                                                                                                                                                                                                                              GHC.Types.True
                                                                                                                                                                                                                                                                                              -> wild2 }
                                                                                                                                                                                                                         GHC.Types.True
                                                                                                                                                                                                                         -> Prop.P
                                                                                                                                                                                                                              ww2
                                                                                                                                                                                                                              ww3 } }
                                                                                                                                                    GHC.Types.True
                                                                                                                                                    -> Prop.tt } }) -}
95e09d8fe6d3c5572ec77d76dc4f104a
  $wimplies ::
    Z3.Base.AST
    -> GHC.Base.String
    -> Z3.Base.AST
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Z3.Base.AST)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Z3.Base.AST)
                   (ww3 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.implies} True True} case Prop.$wimpl
                                                                                            ww
                                                                                            ww1
                                                                                            ww2
                                                                                            ww3 of ww4 { Prop.P ww5 ww6 ->
                                                                                     {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tautology} True True} case Prop.$wneg
                                                                                                                                                                  ww5
                                                                                                                                                                  ww6 of ww7 { (#,#) ww8 ww9 ->
                                                                                                                                                           {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.unsat} True True} let {
                                                                                                                                                                                                                               ds :: Z3.Base.Result
                                                                                                                                                                                                                               = Prop.$wcheckSAT
                                                                                                                                                                                                                                   ww8
                                                                                                                                                                                                                                   ww9
                                                                                                                                                                                                                             } in
                                                                                                                                                                                                                             {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.==} True True} case ds of wild {
                                                                                                                                                                                                                                                                                                       DEFAULT
                                                                                                                                                                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                                                                                                                                                                       Z3.Base.Unsat
                                                                                                                                                                                                                                                                                                       -> GHC.Types.True } } }) -}
ceac7fb131d3e04092e786834f89416f
  $wneg ::
    Z3.Base.AST
    -> GHC.Base.String -> (# Z3.Base.AST, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Z3.Base.AST) (ww1 :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.neg} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.neg} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                                                                                              (case GHC.Magic.runRW#
                                                                                                                                                                                                                                      @ 'GHC.Types.PtrRepLifted
                                                                                                                                                                                                                                      @ Z3.Base.AST
                                                                                                                                                                                                                                      (\ (s :: GHC.Prim.State#
                                                                                                                                                                                                                                                 GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                                                                                                                                       case GHC.Prim.noDuplicate#
                                                                                                                                                                                                                                              s of s' { DEFAULT ->
                                                                                                                                                                                                                                       (Z3.Base.mkNot
                                                                                                                                                                                                                                          Prop.ctxt
                                                                                                                                                                                                                                          ww)
                                                                                                                                                                                                                                         `cast`
                                                                                                                                                                                                                                       (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                            <Z3.Base.AST>_R)
                                                                                                                                                                                                                                         s' }) of ds { (#,#) ipv ipv1 ->
                                                                                                                                                                                                                               ipv1 })
                                                                                                                                                                                                                              (GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                 "Not("#
                                                                                                                                                                                                                                 (GHC.Base.++
                                                                                                                                                                                                                                    @ GHC.Types.Char
                                                                                                                                                                                                                                    ww1
                                                                                                                                                                                                                                    Prop.implies1)) of ww2 { Prop.P ww3 ww4 ->
                                                                                  (# ww3,
                                                                                     ww4 #) }) -}
344b8466ebf26aca95e92dceb14e38a2
  data Prop = P Z3.Base.AST GHC.Base.String
7d9a0540c73aee69ef71b443e08e06e2
  type SATCache =
    Data.HashTable.IO.BasicHashTable Prop.Prop Z3.Base.Result
fa370dffb20db5881aa377d89d7fb2f4
  atom :: GHC.Base.String -> Prop.Prop
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Base.String) ->
                 case Prop.$watom w of ww { (#,#) ww1 ww2 -> Prop.P ww1 ww2 }) -}
2f114d6a9eba8beb789fed286698fa62
  cacheSize :: GHC.Types.Int
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.cacheSize} True False} GHC.Types.I#
                                                                                          1000#) -}
d44cc05d8fbd16c69b34309a98001f8d
  checkSAT :: Prop.Prop -> Z3.Base.Result
  {- Arity: 1, Strictness: <S,1*U(U,U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 -> Prop.$wcheckSAT ww1 ww2 }) -}
9be977eed94b88f98c95166b42f854f6
  checkSAT1 :: GHC.Types.IO ()
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.checkSAT} False True} Z3.Base.solverPop
                                                                                         Prop.ctxt
                                                                                         Prop.solver
                                                                                         Prop.checkSAT2) -}
e941c34b76b963beab3175047fe9acc4
  checkSAT2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
a7f0786dbc0b80b2353a8411e66f1365
  checkSAT3 :: GHC.Types.IO Z3.Base.Result
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.checkSAT} False True} Z3.Base.solverCheck
                                                                                         Prop.ctxt
                                                                                         Prop.solver) -}
4cb0c450fc88b671544defd7d56582bc
  checkSAT4 :: GHC.Types.IO ()
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.checkSAT} False True} Z3.Base.solverPush
                                                                                         Prop.ctxt
                                                                                         Prop.solver) -}
fc4db2aceeef1aa4c1c1456e0f3c2f83
  conf :: Z3.Base.Config
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conf} True True} GHC.IO.Unsafe.unsafePerformIO
                                                                                    @ Z3.Base.Config
                                                                                    Z3.Base.mkConfig1
                                                                                      `cast`
                                                                                    (Sym (GHC.Types.N:IO[0]
                                                                                              <Z3.Base.Config>_R))) -}
4d65dcf1fc8b5091b5d860e87d13bc49
  conj :: [Prop.Prop] -> Prop.Prop
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ps'' :: [Prop.Prop]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj} True True} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj.ps} True True} GHC.List.filter
                                                                                                                                                             @ Prop.Prop
                                                                                                                                                             Prop.conj2
                                                                                                                                                             (Data.OldList.nubBy
                                                                                                                                                                @ Prop.Prop
                                                                                                                                                                Prop.$fEqProp_$c==
                                                                                                                                                                ps'') of wild {
                                                                                    [] -> Prop.tt
                                                                                    : ds1 ds2
                                                                                    -> case GHC.List.$wlenAcc
                                                                                              @ Prop.Prop
                                                                                              wild
                                                                                              0# of ww2 {
                                                                                         DEFAULT
                                                                                         -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case Prop.ff of wild1 { Prop.P ds a1 ->
                                                                                                                                                            case ds1 of wild2 { Prop.P ds4 a2 ->
                                                                                                                                                            case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                   a1
                                                                                                                                                                                                                                   a2 of wild3 {
                                                                                                                                                              GHC.Types.False
                                                                                                                                                              -> letrec {
                                                                                                                                                                   go :: [Prop.Prop]
                                                                                                                                                                         -> Data.Monoid.Any
                                                                                                                                                                     {- Arity: 1,
                                                                                                                                                                        Strictness: <S,1*U> -}
                                                                                                                                                                   = \ (ds5 :: [Prop.Prop]) ->
                                                                                                                                                                     case ds5 of wild4 {
                                                                                                                                                                       []
                                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                                            `cast`
                                                                                                                                                                          (Sym (Data.Monoid.N:Any[0]))
                                                                                                                                                                       : y ys
                                                                                                                                                                       -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case y of wild5 { Prop.P ds6 a4 ->
                                                                                                                                                                                                                                          case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                                                                                                 a1
                                                                                                                                                                                                                                                                                                                 a4 of wild6 {
                                                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                                                            -> go
                                                                                                                                                                                                                                                 ys
                                                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                                                            -> GHC.Types.True
                                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                                               (Sym (Data.Monoid.N:Any[0])) } } }
                                                                                                                                                                 } in
                                                                                                                                                                 case (go
                                                                                                                                                                         ds2)
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Data.Monoid.N:Any[0]) of wild4 {
                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                   -> let {
                                                                                                                                                                        sorted_ps :: [Prop.Prop]
                                                                                                                                                                        = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj.sorted_ps} True True} Data.OldList.sortBy
                                                                                                                                                                                                                                                       @ Prop.Prop
                                                                                                                                                                                                                                                       Prop.$fOrdProp_$ccompare
                                                                                                                                                                                                                                                       wild
                                                                                                                                                                      } in
                                                                                                                                                                      {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                                                                                                            (case GHC.Magic.runRW#
                                                                                                                                                                                                                                                    @ 'GHC.Types.PtrRepLifted
                                                                                                                                                                                                                                                    @ Z3.Base.AST
                                                                                                                                                                                                                                                    (\ (s :: GHC.Prim.State#
                                                                                                                                                                                                                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                                                                                                                                                     case GHC.Prim.noDuplicate#
                                                                                                                                                                                                                                                            s of s' { DEFAULT ->
                                                                                                                                                                                                                                                     (Z3.Base.mkAnd
                                                                                                                                                                                                                                                        Prop.ctxt
                                                                                                                                                                                                                                                        ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj.ps'} True True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                @ Prop.Prop
                                                                                                                                                                                                                                                                                                                                @ Z3.Base.AST
                                                                                                                                                                                                                                                                                                                                Prop.conj1
                                                                                                                                                                                                                                                                                                                                sorted_ps))
                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                     (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                                          <Z3.Base.AST>_R)
                                                                                                                                                                                                                                                       s' }) of ds5 { (#,#) ipv ipv1 ->
                                                                                                                                                                                                                                             ipv1 })
                                                                                                                                                                                                                                            ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj.str} True True} GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                                                                    "And"#
                                                                                                                                                                                                                                                                                                                    (GHC.Show.showList__
                                                                                                                                                                                                                                                                                                                       @ Prop.Prop
                                                                                                                                                                                                                                                                                                                       Prop.$fShowProp1
                                                                                                                                                                                                                                                                                                                       sorted_ps
                                                                                                                                                                                                                                                                                                                       (GHC.Types.[]
                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char)))
                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                   -> wild1 }
                                                                                                                                                              GHC.Types.True
                                                                                                                                                              -> wild1 } } }
                                                                                         1#
                                                                                         -> ds1 } }) -}
5e031ebf89441c311e14d0721998dfea
  conj1 :: Prop.Prop -> Z3.Base.AST
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Prop.Prop) ->
                 case ds of wild { Prop.P x ds1 ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.conj.ps'.\} True False} x }) -}
692533f0cdcc677b02824de708241b18
  conj2 :: Prop.Prop -> GHC.Types.Bool
  {- Arity: 1, Unfolding: (Prop.$fEqProp_$c/= Prop.tt) -}
de2f5b7e9fcfe28ff947612027858b4e
  ctxt :: Z3.Base.Context
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ctxt} True True} GHC.IO.Unsafe.unsafePerformIO
                                                                                    @ Z3.Base.Context
                                                                                    Prop.ctxt1
                                                                                      `cast`
                                                                                    (Sym (GHC.Types.N:IO[0]
                                                                                              <Z3.Base.Context>_R))) -}
bf1f428be06bbb2a2439a44f10b6799e
  ctxt1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Context #)
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ctxt} False True} Z3.Base.mkContext1
                                                                                     Prop.conf) -}
b8de2c9d1dcf67ad534c918107f7592a
  disj :: [Prop.Prop] -> Prop.Prop
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ps'' :: [Prop.Prop]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj} True True} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj.ps} True True} GHC.List.filter
                                                                                                                                                             @ Prop.Prop
                                                                                                                                                             Prop.disj2
                                                                                                                                                             (Data.OldList.nubBy
                                                                                                                                                                @ Prop.Prop
                                                                                                                                                                Prop.$fEqProp_$c==
                                                                                                                                                                ps'') of wild {
                                                                                    [] -> Prop.ff
                                                                                    : ds1 ds2
                                                                                    -> case GHC.List.$wlenAcc
                                                                                              @ Prop.Prop
                                                                                              wild
                                                                                              0# of ww2 {
                                                                                         DEFAULT
                                                                                         -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case Prop.tt of wild1 { Prop.P ds a1 ->
                                                                                                                                                            case ds1 of wild2 { Prop.P ds4 a2 ->
                                                                                                                                                            case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                   a1
                                                                                                                                                                                                                                   a2 of wild3 {
                                                                                                                                                              GHC.Types.False
                                                                                                                                                              -> letrec {
                                                                                                                                                                   go :: [Prop.Prop]
                                                                                                                                                                         -> Data.Monoid.Any
                                                                                                                                                                     {- Arity: 1,
                                                                                                                                                                        Strictness: <S,1*U> -}
                                                                                                                                                                   = \ (ds5 :: [Prop.Prop]) ->
                                                                                                                                                                     case ds5 of wild4 {
                                                                                                                                                                       []
                                                                                                                                                                       -> GHC.Types.False
                                                                                                                                                                            `cast`
                                                                                                                                                                          (Sym (Data.Monoid.N:Any[0]))
                                                                                                                                                                       : y ys
                                                                                                                                                                       -> {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} True False} case y of wild5 { Prop.P ds6 a4 ->
                                                                                                                                                                                                                                          case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.==} False True} GHC.Base.eqString
                                                                                                                                                                                                                                                                                                                 a1
                                                                                                                                                                                                                                                                                                                 a4 of wild6 {
                                                                                                                                                                                                                                            GHC.Types.False
                                                                                                                                                                                                                                            -> go
                                                                                                                                                                                                                                                 ys
                                                                                                                                                                                                                                            GHC.Types.True
                                                                                                                                                                                                                                            -> GHC.Types.True
                                                                                                                                                                                                                                                 `cast`
                                                                                                                                                                                                                                               (Sym (Data.Monoid.N:Any[0])) } } }
                                                                                                                                                                 } in
                                                                                                                                                                 case (go
                                                                                                                                                                         ds2)
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Data.Monoid.N:Any[0]) of wild4 {
                                                                                                                                                                   GHC.Types.False
                                                                                                                                                                   -> let {
                                                                                                                                                                        sorted_ps :: [Prop.Prop]
                                                                                                                                                                        = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj.sorted_ps} True True} Data.OldList.sortBy
                                                                                                                                                                                                                                                       @ Prop.Prop
                                                                                                                                                                                                                                                       Prop.$fOrdProp_$ccompare
                                                                                                                                                                                                                                                       wild
                                                                                                                                                                      } in
                                                                                                                                                                      {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                                                                                                            (case GHC.Magic.runRW#
                                                                                                                                                                                                                                                    @ 'GHC.Types.PtrRepLifted
                                                                                                                                                                                                                                                    @ Z3.Base.AST
                                                                                                                                                                                                                                                    (\ (s :: GHC.Prim.State#
                                                                                                                                                                                                                                                               GHC.Prim.RealWorld)[OneShot] ->
                                                                                                                                                                                                                                                     case GHC.Prim.noDuplicate#
                                                                                                                                                                                                                                                            s of s' { DEFAULT ->
                                                                                                                                                                                                                                                     (Z3.Base.mkOr
                                                                                                                                                                                                                                                        Prop.ctxt
                                                                                                                                                                                                                                                        ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj.ps'} True True} GHC.Base.map
                                                                                                                                                                                                                                                                                                                                @ Prop.Prop
                                                                                                                                                                                                                                                                                                                                @ Z3.Base.AST
                                                                                                                                                                                                                                                                                                                                Prop.disj1
                                                                                                                                                                                                                                                                                                                                sorted_ps))
                                                                                                                                                                                                                                                       `cast`
                                                                                                                                                                                                                                                     (GHC.Types.N:IO[0]
                                                                                                                                                                                                                                                          <Z3.Base.AST>_R)
                                                                                                                                                                                                                                                       s' }) of ds5 { (#,#) ipv ipv1 ->
                                                                                                                                                                                                                                             ipv1 })
                                                                                                                                                                                                                                            ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj.str} True True} GHC.CString.unpackAppendCString#
                                                                                                                                                                                                                                                                                                                    "Or"#
                                                                                                                                                                                                                                                                                                                    (GHC.Show.showList__
                                                                                                                                                                                                                                                                                                                       @ Prop.Prop
                                                                                                                                                                                                                                                                                                                       Prop.$fShowProp1
                                                                                                                                                                                                                                                                                                                       sorted_ps
                                                                                                                                                                                                                                                                                                                       (GHC.Types.[]
                                                                                                                                                                                                                                                                                                                          @ GHC.Types.Char)))
                                                                                                                                                                   GHC.Types.True
                                                                                                                                                                   -> wild1 }
                                                                                                                                                              GHC.Types.True
                                                                                                                                                              -> wild1 } } }
                                                                                         1#
                                                                                         -> ds1 } }) -}
5acb9c187018f004f5e3bc98395cc1ea
  disj1 :: Prop.Prop -> Z3.Base.AST
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Prop.Prop) ->
                 case ds of wild { Prop.P x ds1 ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.disj.ps'.\} True False} x }) -}
b6dd837ae3e3ec916b10bfbe93fb8a7a
  disj2 :: Prop.Prop -> GHC.Types.Bool
  {- Arity: 1, Unfolding: (Prop.$fEqProp_$c/= Prop.ff) -}
e1be17cdf7a869c00198917c744affc7
  ff :: Prop.Prop
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ff} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                      Prop.ff2
                                                                                                                                                      Prop.ff1) -}
fe1c76fd7df247067f8ed4665339a7b1
  ff1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ff} False True} GHC.CString.unpackCString#
                                                                                   "False"#) -}
11b4e12337ecbbeb53f3fead8f38602d
  ff2 :: Z3.Base.AST
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ff} False True} GHC.IO.Unsafe.unsafePerformIO
                                                                                   @ Z3.Base.AST
                                                                                   Prop.ff3) -}
625e5ebedd4860ce1db22d6dc52c2386
  ff3 :: GHC.Types.IO Z3.Base.AST
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.ff} False True} Z3.Base.mkFalse
                                                                                   Prop.ctxt) -}
d9f0ca561cd36457c67eee10f36c698e
  impl :: Prop.Prop -> Prop.Prop -> Prop.Prop
  {- Arity: 2, Strictness: <S(LS),1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 ->
                 Prop.$wimpl ww1 ww2 ww4 ww5 } }) -}
4c7b137c01efa711a1debe42040b98eb
  implies :: Prop.Prop -> Prop.Prop -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(LS),1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Prop.Prop) (w1 :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case w1 of ww3 { Prop.P ww4 ww5 ->
                 Prop.$wimplies ww1 ww2 ww4 ww5 } }) -}
ca14d6296c9d6a343b0a6bbca2e6e151
  implies1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.neg} False True} GHC.CString.unpackCString#
                                                                                    ")"#) -}
ea31e0bbe95db6ecbeeb125560f0ea8b
  mkProp :: Z3.Base.AST -> GHC.Base.String -> Prop.Prop
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Z3.Base.AST) (s :: GHC.Base.String) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                       a
                                                                                       s) -}
89c1373f9ca3184359d8657d3b76313e
  mkUniverse :: [GHC.Base.String] -> [Prop.Prop]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (as :: [GHC.Base.String]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkUniverse} True True} GHC.Base.build
                                                                                          @ Prop.Prop
                                                                                          (\ @ b1
                                                                                             (c :: Prop.Prop
                                                                                                   -> b1
                                                                                                   -> b1)[OneShot]
                                                                                             (n :: b1)[OneShot] ->
                                                                                           GHC.Base.foldr
                                                                                             @ [GHC.Types.Char]
                                                                                             @ b1
                                                                                             (GHC.Base.mapFB
                                                                                                @ Prop.Prop
                                                                                                @ b1
                                                                                                @ [GHC.Types.Char]
                                                                                                c
                                                                                                Prop.atom)
                                                                                             n
                                                                                             as)) -}
d0d5af1f2d25884e2121d24ad20b1e60
  mkZ3Script :: Z3.Base.AST -> GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: Z3.Base.AST) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkZ3Script} True True} Z3.Base.solverAssertCnstr
                                                                                          Prop.ctxt
                                                                                          Prop.solver
                                                                                          a) -}
19607a3eef949b21ecec6db51a64f246
  neg :: Prop.Prop -> Prop.Prop
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Prop.Prop) ->
                 case w of ww { Prop.P ww1 ww2 ->
                 case Prop.$wneg ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 Prop.P ww4 ww5 } }) -}
94bf79349cb299c9c8a1460a501edeb8
  sat :: Prop.Prop -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.sat} True True} let {
                                                                                   ds :: Z3.Base.Result
                                                                                   = Prop.checkSAT p
                                                                                 } in
                                                                                 {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.==} True True} case ds of wild {
                                                                                                                                                           Z3.Base.Sat
                                                                                                                                                           -> GHC.Types.True
                                                                                                                                                           Z3.Base.Unsat
                                                                                                                                                           -> GHC.Types.False
                                                                                                                                                           Z3.Base.Undef
                                                                                                                                                           -> GHC.Types.False }) -}
363f9793263cd3d4fa02234b99237336
  satCache :: Prop.SATCache
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.satCache} True True} GHC.IO.Unsafe.unsafePerformIO
                                                                                        @ (Data.HashTable.IO.IOHashTable
                                                                                             Data.HashTable.ST.Basic.HashTable
                                                                                             Prop.Prop
                                                                                             Z3.Base.Result)
                                                                                        Prop.satCache1
                                                                                          `cast`
                                                                                        (Trans
                                                                                             (GHC.ST.N:ST[0]
                                                                                                  <GHC.Prim.RealWorld>_N
                                                                                                  <Data.HashTable.ST.Basic.HashTable
                                                                                                     GHC.Prim.RealWorld
                                                                                                     Prop.Prop
                                                                                                     Z3.Base.Result>_R)
                                                                                             (Sym (GHC.Types.N:IO[0]
                                                                                                       (Data.HashTable.ST.Basic.HashTable
                                                                                                          (Control.Monad.Primitive.D:R:PrimStateIO[0])
                                                                                                          <Prop.Prop>_R
                                                                                                          <Z3.Base.Result>_R)_R)))) -}
4831bcbc58101284013463eae62f8bf9
  satCache1 ::
    GHC.ST.ST
      GHC.Prim.RealWorld
      (Data.HashTable.ST.Basic.HashTable
         GHC.Prim.RealWorld Prop.Prop Z3.Base.Result)
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.satCache} False True} Data.HashTable.ST.Basic.$fHashTableHashTable_$cnewSized
                                                                                         @ GHC.Prim.RealWorld
                                                                                         @ Prop.Prop
                                                                                         @ Z3.Base.Result
                                                                                         Prop.cacheSize) -}
f7f2d9f7b6f77f7424d24e2e2f30ce48
  solver :: Z3.Base.Solver
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.solver} True True} GHC.IO.Unsafe.unsafePerformIO
                                                                                      @ Z3.Base.Solver
                                                                                      Prop.solver1) -}
81bf6b3e11817b7b6ffcff6e0bbd98be
  solver1 :: GHC.Types.IO Z3.Base.Solver
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.solver} False True} Z3.Base.mkSimpleSolver
                                                                                       Prop.ctxt) -}
864bbb981fd2d96237646d6fb88e813e
  tautology :: Prop.Prop -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tautology} True True} let {
                                                                                         p1 :: Prop.Prop
                                                                                         = Prop.neg
                                                                                             p
                                                                                       } in
                                                                                       {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.unsat} True True} let {
                                                                                                                                                           ds :: Z3.Base.Result
                                                                                                                                                           = Prop.checkSAT
                                                                                                                                                               p1
                                                                                                                                                         } in
                                                                                                                                                         {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.==} True True} case ds of wild {
                                                                                                                                                                                                                                   DEFAULT
                                                                                                                                                                                                                                   -> GHC.Types.False
                                                                                                                                                                                                                                   Z3.Base.Unsat
                                                                                                                                                                                                                                   -> GHC.Types.True }) -}
c926dbb6db945c0ca176a50c58a54ffe
  tt :: Prop.Prop
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tt} True True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.mkProp} True False} Prop.P
                                                                                                                                                      Prop.tt2
                                                                                                                                                      Prop.tt1) -}
38196b92b99bbc9685c4fe6196fac32d
  tt1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tt} False True} GHC.CString.unpackCString#
                                                                                   "True"#) -}
53d8cfecff7866b357275918e8d5d47c
  tt2 :: Z3.Base.AST
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tt} False True} GHC.IO.Unsafe.unsafePerformIO
                                                                                   @ Z3.Base.AST
                                                                                   Prop.tt3) -}
4da15eff0919990b473d12b9c5274890
  tt3 :: GHC.Types.IO Z3.Base.AST
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.tt} False True} Z3.Base.mkTrue
                                                                                   Prop.ctxt) -}
6f690a2371054e32bfc62fbbd2d20fa8
  unsat :: Prop.Prop -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (p :: Prop.Prop) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:Prop.unsat} True True} let {
                                                                                     ds :: Z3.Base.Result
                                                                                     = Prop.checkSAT
                                                                                         p
                                                                                   } in
                                                                                   {__scc {z3-4.3.1@z3-4.3.1-A3VSiRE95F6LssMMejMUaQ:Z3.Base.==} True True} case ds of wild {
                                                                                                                                                             DEFAULT
                                                                                                                                                             -> GHC.Types.False
                                                                                                                                                             Z3.Base.Unsat
                                                                                                                                                             -> GHC.Types.True }) -}
instance GHC.Classes.Eq [Prop.Prop] = Prop.$fEqProp
instance Data.Hashable.Class.Hashable [Prop.Prop]
  = Prop.$fHashableProp
instance GHC.Classes.Ord [Prop.Prop] = Prop.$fOrdProp
instance GHC.Show.Show [Prop.Prop] = Prop.$fShowProp
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

