
==================== FINAL INTERFACE ====================
2019-03-07 05:03:01.049824 UTC

interface SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL [hpc] 8002
  interface hash: 9ee25ce068c450947e1905a8c6d38978
  ABI hash: fe488233b733de36632706b6b8af2a83
  export-list hash: a2d28348b799da63d289715ec341de8a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 3e57d1e2ae056104a223e6d305683960
  sig of: Nothing
  used TH splices: False
  where
exports:
  SPL.===
  SPL.====
  SPL.apply
  SPL.apply_
  SPL.compact
  SPL.compactEq
  SPL.cond
  SPL.cond'
  SPL.definedAt
  SPL.exists
  SPL.filterLifted
  SPL.findVal
  SPL.getAllConfigs
  SPL.getValidConfigs
  SPL.groupVals
  SPL.groupVals_
  SPL.index
  SPL.inv
  SPL.isSubsetOf
  SPL.liftA4
  SPL.liftA5
  SPL.liftV
  SPL.liftV2
  SPL.liftV3
  SPL.liftV4
  SPL.liftV5
  SPL.mapLifted
  SPL.mkVar
  SPL.mkVarT
  SPL.mkVars
  SPL.pairs
  SPL.phelem
  SPL.restrict
  SPL.subst
  SPL.undefinedAt
  SPL.union
  SPL.union2
  SPL.unions
  SPL.valIndex
  SPL.|+|
  SPL.|:|
  SPL.|==|
  SPL.PresenceCondition
  SPL.Val
  SPL.Var{SPL.Var}
module dependencies: PropBDD
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      containers-0.5.7.1@containers-0.5.7.1
                      cudd-0.1.0.4@cudd-0.1.0.4-FSAkhUabwhMcZB0faAolK
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      parallel-3.2.1.0@parallel-3.2.1.0-CNlrARikHUx7Z7NHwpxRS3
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
import  -/  PropBDD d25d1d6bf25f26686f7343a37ea0f723
  exports: 40654a78275b99c61232276625bd869a
  Prop 9041b52fec2b1117a30415f595661f09
  conj 02f383934e015801e33ca175cbfc79a2
  disj cfed83372ffa744c9e6fe36fdef9e10c
  implies ef72142bd1490ab9f83b835be369a465
  neg dfc7f7bf5b1551455887b6e843b9ff55
  sat bb374afbb172c45aab064a503fd21255
  tt 11fc110d1f275d3e9b31a0109a661687
  unsat f23643b6703677f9bff11a9f092873ff
import  -/  base-4.9.1.0:Control.Applicative 32430a90492e727f4bd80db71c28600c
import  -/  base-4.9.1.0:Control.Exception a76dd9666251322fe34dbcca3a0817bf
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.IO.Unsafe 1c057c642b0e201f55a24585d3d94564
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO.Unsafe 1e3c5b8dd8cf6850ae43cce967bb46cd
import  -/  base-4.9.1.0:System.Mem.StableName 23f9e05ef19db7982375ca2ae4791ca9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  parallel-3.2.1.0@parallel-3.2.1.0-CNlrARikHUx7Z7NHwpxRS3:Control.Parallel.Strategies b41751ded5a96445e50d7161ec716a08
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar :: GHC.Base.Applicative SPL.Var
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SPL.Var
                  SPL.$fFunctorVar
                  SPL.$fApplicativeVar_$cpure
                  SPL.$fApplicativeVar_$c<*>
                  SPL.$fApplicativeVar_$c*>
                  SPL.$fApplicativeVar_$c<* -}
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar1 :: SPL.Var (a -> b -> b)
  {- Unfolding: (\ @ b @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} False True} SPL.mkVarT
                                                                                    @ (a -> b -> b)
                                                                                    (SPL.$fApplicativeVar2
                                                                                       @ a
                                                                                       @ b)) -}
f7f01b27c83cab275a07fb9d2222d063
  $fApplicativeVar2 :: a -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: (\ @ a @ b (ds :: a) -> GHC.Base.breakpoint @ b) -}
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar_$c*> :: SPL.Var a -> SPL.Var b -> SPL.Var b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ @ a @ b (eta :: SPL.Var a) (eta1 :: SPL.Var b) ->
                 SPL.$fApplicativeVar_$c<*>
                   @ b
                   @ b
                   (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                       @ a
                                                                                       @ (b -> b)
                                                                                       (SPL.$fApplicativeVar1
                                                                                          @ b
                                                                                          @ a))
                      eta)
                   eta1) -}
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar_$c<* :: SPL.Var a -> SPL.Var b -> SPL.Var a
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (eta :: SPL.Var a) (eta1 :: SPL.Var b) ->
                 SPL.$fApplicativeVar_$c<*>
                   @ b
                   @ a
                   (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                       @ a
                                                                                       @ (b -> a)
                                                                                       (SPL.mkVarT
                                                                                          @ (a
                                                                                             -> b
                                                                                             -> a)
                                                                                          (GHC.Base.const
                                                                                             @ a
                                                                                             @ b)))
                      eta)
                   eta1) -}
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar_$c<*> ::
    SPL.Var (a -> b) -> SPL.Var a -> SPL.Var b
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.<*>} True False} SPL.apply) -}
3d3b229fbc24d03635a863a001709584
  $fApplicativeVar_$cpure :: a -> SPL.Var a
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.pure} True False} SPL.mkVarT) -}
3d3b229fbc24d03635a863a001709584
  $fEqVar :: GHC.Classes.Eq a => GHC.Classes.Eq (SPL.Var a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (SPL.Var a)
                  (SPL.$fEqVar_$c== @ a $dEq)
                  (SPL.$fEqVar_$c/= @ a $dEq) -}
3d3b229fbc24d03635a863a001709584
  $fEqVar1 ::
    GHC.Classes.Eq t => SPL.Var t -> SPL.Var t -> Data.Monoid.All
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U>,
     Unfolding: (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (ds :: SPL.Var t)
                   (y' :: SPL.Var t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.isSubsetOf} True True} letrec {
                                                                                         go :: [(t,
                                                                                                 SPL.PresenceCondition)]
                                                                                               -> Data.Monoid.All
                                                                                           {- Arity: 1,
                                                                                              Strictness: <S,1*U> -}
                                                                                         = \ (ds1 :: [(t,
                                                                                                       SPL.PresenceCondition)]) ->
                                                                                           case ds1 of wild {
                                                                                             []
                                                                                             -> GHC.Types.True
                                                                                                  `cast`
                                                                                                (Sym (Data.Monoid.N:All[0]))
                                                                                             : y ys
                                                                                             -> case y of ww { (,) ww1 ww2 ->
                                                                                                case SPL.$wexists
                                                                                                       @ t
                                                                                                       $dEq
                                                                                                       ww1
                                                                                                       ww2
                                                                                                       y' of wild1 {
                                                                                                  GHC.Types.False
                                                                                                  -> GHC.Types.False
                                                                                                       `cast`
                                                                                                     (Sym (Data.Monoid.N:All[0]))
                                                                                                  GHC.Types.True
                                                                                                  -> go
                                                                                                       ys } } }
                                                                                       } in
                                                                                       go
                                                                                         ds
                                                                                           `cast`
                                                                                         (SPL.N:Var[0]
                                                                                              <t>_R)) -}
3d3b229fbc24d03635a863a001709584
  $fEqVar2 :: SPL.Var t -> SPL.Var t
  {- Unfolding: (\ @ t ->
                 ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.compactEq} True False} GHC.Base.id)
                   @ (SPL.Var t)) -}
3d3b229fbc24d03635a863a001709584
  $fEqVar_$c/= ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL./=} True True} case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.==} True True} SPL.$fEqVar1
                                                                                                                                                     @ a
                                                                                                                                                     $dEq
                                                                                                                                                     x
                                                                                                                                                     y)
                                                                                      `cast`
                                                                                    (Data.Monoid.N:All[0]) of wild {
                                                                                 GHC.Types.False
                                                                                 -> GHC.Types.True
                                                                                 GHC.Types.True
                                                                                 -> case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.==} False True} SPL.$fEqVar1
                                                                                                                                                           @ a
                                                                                                                                                           $dEq
                                                                                                                                                           y
                                                                                                                                                           x)
                                                                                           `cast`
                                                                                         (Data.Monoid.N:All[0]) of wild1 {
                                                                                      GHC.Types.False
                                                                                      -> GHC.Types.True
                                                                                      GHC.Types.True
                                                                                      -> GHC.Types.False } }) -}
3d3b229fbc24d03635a863a001709584
  $fEqVar_$c== ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.==} True True} case (SPL.$fEqVar1
                                                                                       @ a
                                                                                       $dEq
                                                                                       x
                                                                                       y)
                                                                                      `cast`
                                                                                    (Data.Monoid.N:All[0]) of wild {
                                                                                 GHC.Types.False
                                                                                 -> GHC.Types.False
                                                                                 GHC.Types.True
                                                                                 -> (SPL.$fEqVar1
                                                                                       @ a
                                                                                       $dEq
                                                                                       y
                                                                                       x)
                                                                                      `cast`
                                                                                    (Data.Monoid.N:All[0]) }) -}
3d3b229fbc24d03635a863a001709584
  $fFunctorVar :: GHC.Base.Functor SPL.Var
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ SPL.Var SPL.$fFunctorVar_$cfmap SPL.$fFunctorVar_$c<$ -}
3d3b229fbc24d03635a863a001709584
  $fFunctorVar_$c<$ :: a -> SPL.Var b -> SPL.Var a
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (eta :: a) ->
                 let {
                   f :: b -> a {- Arity: 1 -} = \ (ds :: b) -> eta
                 } in
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                   @ b
                                                                                   @ a
                                                                                   (SPL.mkVarT
                                                                                      @ (b -> a)
                                                                                      f)) -}
3d3b229fbc24d03635a863a001709584
  $fFunctorVar_$cfmap :: (a -> b) -> SPL.Var a -> SPL.Var b
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ b (f :: a -> b) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                   @ a
                                                                                   @ b
                                                                                   (SPL.mkVarT
                                                                                      @ (a -> b)
                                                                                      f)) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar :: GHC.Classes.Eq a => GHC.Classes.Ord (SPL.Var a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (SPL.Var a)
                  (SPL.$fEqVar @ a $dEq)
                  (SPL.$fOrdVar_$ccompare @ a $dEq)
                  (SPL.$fOrdVar_$c< @ a $dEq)
                  (SPL.$fOrdVar_$c<= @ a $dEq)
                  (SPL.$fOrdVar_$c> @ a $dEq)
                  (SPL.$fOrdVar_$c>= @ a $dEq)
                  (SPL.$fOrdVar_$cmax @ a $dEq)
                  (SPL.$fOrdVar_$cmin @ a $dEq) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$c< ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x' :: SPL.Var a)
                   (y' :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.<} True True} case (SPL.$fEqVar1
                                                                                      @ a
                                                                                      $dEq
                                                                                      x'
                                                                                      y')
                                                                                     `cast`
                                                                                   (Data.Monoid.N:All[0]) of wild {
                                                                                GHC.Types.False
                                                                                -> GHC.Types.False
                                                                                GHC.Types.True
                                                                                -> case (SPL.$fEqVar1
                                                                                           @ a
                                                                                           $dEq
                                                                                           y'
                                                                                           x')
                                                                                          `cast`
                                                                                        (Data.Monoid.N:All[0]) of wild1 {
                                                                                     GHC.Types.False
                                                                                     -> GHC.Types.True
                                                                                     GHC.Types.True
                                                                                     -> GHC.Types.False } }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$c<= ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.<=} True True} case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.<} True True} SPL.$fEqVar1
                                                                                                                                                    @ a
                                                                                                                                                    $dEq
                                                                                                                                                    x
                                                                                                                                                    y)
                                                                                      `cast`
                                                                                    (Data.Monoid.N:All[0]) of wild {
                                                                                 GHC.Types.False
                                                                                 -> SPL.$fEqVar_$c==
                                                                                      @ a
                                                                                      $dEq
                                                                                      x
                                                                                      y
                                                                                 GHC.Types.True
                                                                                 -> case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.<} False True} SPL.$fEqVar1
                                                                                                                                                          @ a
                                                                                                                                                          $dEq
                                                                                                                                                          y
                                                                                                                                                          x)
                                                                                           `cast`
                                                                                         (Data.Monoid.N:All[0]) of wild1 {
                                                                                      GHC.Types.False
                                                                                      -> GHC.Types.True
                                                                                      GHC.Types.True
                                                                                      -> SPL.$fEqVar_$c==
                                                                                           @ a
                                                                                           $dEq
                                                                                           x
                                                                                           y } }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$c> ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 case SPL.$fOrdVar_$ccompare @ a $dEq x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$c>= ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 case SPL.$fOrdVar_$ccompare @ a $dEq x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$ccompare ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> GHC.Types.Ordering
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (eta :: SPL.Var a)
                   (eta1 :: SPL.Var a) ->
                 case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.==} True True} SPL.$fEqVar1
                                                                                       @ a
                                                                                       $dEq
                                                                                       eta
                                                                                       eta1)
                        `cast`
                      (Data.Monoid.N:All[0]) of wild {
                   GHC.Types.False
                   -> case SPL.$fOrdVar_$c<= @ a $dEq eta eta1 of wild1 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True
                   -> case ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.==} False True} SPL.$fEqVar1
                                                                                             @ a
                                                                                             $dEq
                                                                                             eta1
                                                                                             eta)
                             `cast`
                           (Data.Monoid.N:All[0]) of wild1 {
                        GHC.Types.False
                        -> case SPL.$fOrdVar_$c<= @ a $dEq eta eta1 of wild2 {
                             GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.LT }
                        GHC.Types.True -> GHC.Types.EQ } }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$cmax ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> SPL.Var a
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 case SPL.$fOrdVar_$c<= @ a $dEq x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
3d3b229fbc24d03635a863a001709584
  $fOrdVar_$cmin ::
    GHC.Classes.Eq a => SPL.Var a -> SPL.Var a -> SPL.Var a
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: SPL.Var a)
                   (y :: SPL.Var a) ->
                 case SPL.$fOrdVar_$c<= @ a $dEq x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
3d3b229fbc24d03635a863a001709584
  $fShowVar :: GHC.Show.Show a => GHC.Show.Show (SPL.Var a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C1(U))),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (SPL.Var a)
                  (SPL.$fShowVar_$cshowsPrec @ a $dShow)
                  (SPL.$fShowVar_$cshow @ a $dShow)
                  (SPL.$fShowVar_$cshowList @ a $dShow) -}
66a4b7e3e4c98ccd5065b5f1c5baccc9
  $fShowVar1 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show} False True} GHC.CString.unpackCString#
                                                                                    "}"#) -}
b46acaaf78c65581e247107f999b2949
  $fShowVar2 :: [GHC.Types.Char]
  {- Unfolding: ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show.\} False True} GHC.CString.unpackCString#
                                                                                                                                                       "\n"#) -}
2039665a04e3b744b48b670ceff7c384
  $fShowVar3 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3d3b229fbc24d03635a863a001709584
  $fShowVar_$cshow :: GHC.Show.Show a => SPL.Var a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C1(U))),A,A)><L,U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (v' :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show} True True} GHC.CString.unpackAppendCString#
                                                                                   "{\n"#
                                                                                   (letrec {
                                                                                      go :: [(a,
                                                                                              SPL.PresenceCondition)]
                                                                                            -> [GHC.Types.Char]
                                                                                        {- Arity: 1,
                                                                                           Strictness: <S,1*U> -}
                                                                                      = \ (ds :: [(a,
                                                                                                   SPL.PresenceCondition)]) ->
                                                                                        case ds of wild {
                                                                                          []
                                                                                          -> GHC.Types.[]
                                                                                               @ GHC.Types.Char
                                                                                          : y ys
                                                                                          -> GHC.Base.++
                                                                                               @ GHC.Types.Char
                                                                                               ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show.\} True True} case y of ww { (,) ww1 ww2 ->
                                                                                                                                                                  GHC.Base.++
                                                                                                                                                                    @ GHC.Types.Char
                                                                                                                                                                    (GHC.Types.:
                                                                                                                                                                       @ GHC.Types.Char
                                                                                                                                                                       GHC.Show.shows7
                                                                                                                                                                       (GHC.Show.showsPrec
                                                                                                                                                                          @ a
                                                                                                                                                                          $dShow
                                                                                                                                                                          GHC.Show.shows22
                                                                                                                                                                          ww1
                                                                                                                                                                          (GHC.Types.:
                                                                                                                                                                             @ GHC.Types.Char
                                                                                                                                                                             GHC.Show.shows5
                                                                                                                                                                             (GHC.Show.$fShow(,)_$sgo
                                                                                                                                                                                SPL.$fShowVar3
                                                                                                                                                                                (Cudd.Cudd.$w$cshowsPrec
                                                                                                                                                                                   0#
                                                                                                                                                                                   ww2)
                                                                                                                                                                                (GHC.Types.[]
                                                                                                                                                                                   @ GHC.Show.ShowS)))))
                                                                                                                                                                    SPL.$fShowVar2 })
                                                                                               (go
                                                                                                  ys) }
                                                                                    } in
                                                                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show.v} True False} GHC.Base.++
                                                                                                                                                         @ GHC.Types.Char
                                                                                                                                                         (go
                                                                                                                                                            ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.show.(...)} True True} SPL.compact
                                                                                                                                                                                                                                     @ a
                                                                                                                                                                                                                                     v')
                                                                                                                                                              `cast`
                                                                                                                                                            (SPL.N:Var[0]
                                                                                                                                                                 <a>_R))
                                                                                                                                                         SPL.$fShowVar1)) -}
3d3b229fbc24d03635a863a001709584
  $fShowVar_$cshowList ::
    GHC.Show.Show a => [SPL.Var a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C1(U))),A,A)><S,1*U><L,U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [SPL.Var a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (SPL.Var a)
                   (\ (x :: SPL.Var a) (s1 :: GHC.Base.String)[OneShot] ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      (SPL.$fShowVar_$cshow @ a $dShow x)
                      s1)
                   ls
                   s) -}
3d3b229fbc24d03635a863a001709584
  $fShowVar_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> SPL.Var a -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(C(C1(C1(U))),A,A)><L,A><L,U><L,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ds :: GHC.Types.Int)
                   (x :: SPL.Var a)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (SPL.$fShowVar_$cshow @ a $dShow x))
                   s) -}
fa3329b6819fb13203a30c88b342f95b
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18173695723068396008##
                   8426347322201112810##
                   SPL.$trModule
                   SPL.$tc'Var1) -}
c5ecbe83df42ecd78bfcd6cff8c4b936
  $tc'Var1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Var"#) -}
54f1f9447987a8f14af8ed26bb14f80f
  $tcVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17938850497659246054##
                   14607066481871612745##
                   SPL.$trModule
                   SPL.$tcVar1) -}
486063703431c5d14c05a90cb784ca70
  $tcVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Var"#) -}
69374c464f671876a4750fd13ad932c2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module SPL.$trModule2 SPL.$trModule1) -}
d00534a6e92701c0d914b28d194da047
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SPL"#) -}
a40a30f051e79183efe88cafb165b1af
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG"#) -}
4f8dba10835a0498671e20f51636c7d9
  $wapply_ ::
    (a -> b) -> SPL.PresenceCondition -> SPL.Var a -> SPL.Var b
  {- Arity: 3, Strictness: <L,C(U)><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (ww :: a -> b)
                   (ww1 :: SPL.PresenceCondition)
                   (w :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.apply_} True True} letrec {
                                                                                     go :: [(a,
                                                                                             SPL.PresenceCondition)]
                                                                                           -> [(b,
                                                                                                SPL.PresenceCondition)]
                                                                                       {- Arity: 1,
                                                                                          Strictness: <S,1*U> -}
                                                                                     = \ (ds :: [(a,
                                                                                                  SPL.PresenceCondition)]) ->
                                                                                       case ds of wild {
                                                                                         []
                                                                                         -> GHC.Types.[]
                                                                                              @ (b,
                                                                                                 SPL.PresenceCondition)
                                                                                         : y ys
                                                                                         -> case y of wild1 { (,) x'' xpc ->
                                                                                            let {
                                                                                              pc :: PropBDD.Prop
                                                                                              = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.apply_.pc} True True} PropBDD.conj
                                                                                                                                                                       (GHC.Types.:
                                                                                                                                                                          @ PropBDD.Prop
                                                                                                                                                                          ww1
                                                                                                                                                                          (GHC.Types.:
                                                                                                                                                                             @ PropBDD.Prop
                                                                                                                                                                             xpc
                                                                                                                                                                             (GHC.Types.[]
                                                                                                                                                                                @ PropBDD.Prop)))
                                                                                            } in
                                                                                            case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:PropBDD.sat} True True} Cudd.Cudd.$fEqDDNode1
                                                                                                                                                                      pc
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Cudd.Cudd.N:DDNode[0])
                                                                                                                                                                      PropBDD.ff
                                                                                                                                                                        `cast`
                                                                                                                                                                      (Cudd.Cudd.N:DDNode[0]) of wild2 {
                                                                                              GHC.Types.False
                                                                                              -> go
                                                                                                   ys
                                                                                              GHC.Types.True
                                                                                              -> GHC.Types.:
                                                                                                   @ (b,
                                                                                                      SPL.PresenceCondition)
                                                                                                   (ww
                                                                                                      x'',
                                                                                                    pc)
                                                                                                   (go
                                                                                                      ys) } } }
                                                                                   } in
                                                                                   ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mkVars} True False} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.apply_.x} True False} go
                                                                                                                                                                                                                              ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.apply_.(...)} True True} SPL.compact
                                                                                                                                                                                                                                                                                                         @ a
                                                                                                                                                                                                                                                                                                         w)
                                                                                                                                                                                                                                `cast`
                                                                                                                                                                                                                              (SPL.N:Var[0]
                                                                                                                                                                                                                                   <a>_R))
                                                                                     `cast`
                                                                                   (Sym (SPL.N:Var[0]
                                                                                             <b>_R))) -}
cc0d5bb933a0059779b1b0fc5c87e6b0
  $wcond' ::
    SPL.Var GHC.Types.Bool -> SPL.Var a -> SPL.Var a -> SPL.Var a
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: SPL.Var GHC.Types.Bool)
                   (w1 :: SPL.Var a)
                   (w2 :: SPL.Var a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.cond'} True True} case w `cast`
                                                                                       (SPL.N:Var[0]
                                                                                            <GHC.Types.Bool>_R) of c { DEFAULT ->
                                                                                  SPL.compact
                                                                                    @ a
                                                                                    (let {
                                                                                       parts :: [SPL.Var
                                                                                                   a]
                                                                                       = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.cond'.parts} True True} GHC.Base.map
                                                                                                                                                                  @ (GHC.Types.Bool,
                                                                                                                                                                     SPL.PresenceCondition)
                                                                                                                                                                  @ (SPL.Var
                                                                                                                                                                       a)
                                                                                                                                                                  (\ (c' :: (GHC.Types.Bool,
                                                                                                                                                                             SPL.PresenceCondition)) ->
                                                                                                                                                                   {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.cond'.parts.\} True True} case c' of wild { (,) ds pc ->
                                                                                                                                                                                                                                            case ds of wild1 {
                                                                                                                                                                                                                                              GHC.Types.False
                                                                                                                                                                                                                                              -> (SPL.cond'2
                                                                                                                                                                                                                                                    @ a
                                                                                                                                                                                                                                                    pc
                                                                                                                                                                                                                                                    w2)
                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                 (Sym (SPL.N:Var[0]
                                                                                                                                                                                                                                                           <a>_R))
                                                                                                                                                                                                                                              GHC.Types.True
                                                                                                                                                                                                                                              -> (SPL.cond'2
                                                                                                                                                                                                                                                    @ a
                                                                                                                                                                                                                                                    pc
                                                                                                                                                                                                                                                    w1)
                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                 (Sym (SPL.N:Var[0]
                                                                                                                                                                                                                                                           <a>_R)) } })
                                                                                                                                                                  c
                                                                                     } in
                                                                                     {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.cond'.agg} True True} SPL.cond'1
                                                                                                                                                            @ a
                                                                                                                                                            parts) }) -}
3d3b229fbc24d03635a863a001709584
  $wexists ::
    GHC.Classes.Eq t =>
    t -> SPL.PresenceCondition -> SPL.Var t -> GHC.Types.Bool
  {- Arity: 4, Strictness: <L,U(C(C1(U)),A)><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ t
                   (w :: GHC.Classes.Eq t)
                   (ww :: t)
                   (ww1 :: SPL.PresenceCondition)
                   (w1 :: SPL.Var t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.exists} True True} letrec {
                                                                                     go :: [(t,
                                                                                             SPL.PresenceCondition)]
                                                                                           -> Data.Monoid.Any
                                                                                       {- Arity: 1,
                                                                                          Strictness: <S,1*U> -}
                                                                                     = \ (ds :: [(t,
                                                                                                  SPL.PresenceCondition)]) ->
                                                                                       case ds of wild {
                                                                                         []
                                                                                         -> GHC.Types.False
                                                                                              `cast`
                                                                                            (Sym (Data.Monoid.N:Any[0]))
                                                                                         : y ys
                                                                                         -> case y of wild1 { (,) y1 ypc ->
                                                                                            case GHC.Classes.==
                                                                                                   @ t
                                                                                                   w
                                                                                                   ww
                                                                                                   y1 of wild2 {
                                                                                              GHC.Types.False
                                                                                              -> go
                                                                                                   ys
                                                                                              GHC.Types.True
                                                                                              -> case PropBDD.implies
                                                                                                        ww1
                                                                                                        ypc of wild3 {
                                                                                                   GHC.Types.False
                                                                                                   -> go
                                                                                                        ys
                                                                                                   GHC.Types.True
                                                                                                   -> GHC.Types.True
                                                                                                        `cast`
                                                                                                      (Sym (Data.Monoid.N:Any[0])) } } } }
                                                                                   } in
                                                                                   ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.exists.ys} True False} go
                                                                                                                                                            ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.exists.(...)} True True} SPL.$fEqVar2
                                                                                                                                                                                                                                       @ t
                                                                                                                                                                                                                                       w1)
                                                                                                                                                              `cast`
                                                                                                                                                            (SPL.N:Var[0]
                                                                                                                                                                 <t>_R))
                                                                                     `cast`
                                                                                   (Data.Monoid.N:Any[0])) -}
108d4b033beeef6b752d136c62295e9f
  $winv :: SPL.Var t -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ @ t (w :: SPL.Var t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.inv} True True} SPL.inv2
                                                                                  @ t
                                                                                  ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.pairs} True True} case w `cast`
                                                                                                                                                         (SPL.N:Var[0]
                                                                                                                                                              <t>_R) of wild {
                                                                                                                                                      []
                                                                                                                                                      -> GHC.Types.[]
                                                                                                                                                           @ (SPL.Val
                                                                                                                                                                t,
                                                                                                                                                              SPL.Val
                                                                                                                                                                t)
                                                                                                                                                      : ipv ipv1
                                                                                                                                                      -> GHC.List.zip
                                                                                                                                                           @ (t,
                                                                                                                                                              SPL.PresenceCondition)
                                                                                                                                                           @ (t,
                                                                                                                                                              SPL.PresenceCondition)
                                                                                                                                                           wild
                                                                                                                                                           ipv1 })) -}
c174919a3b855858b901386831361ea8
  (===) :: a -> a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ a (x :: a) (y :: a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.===} True True} case x of x1 { DEFAULT ->
                                                                                case y of y1 { DEFAULT ->
                                                                                case GHC.Magic.runRW#
                                                                                       @ 'GHC.Types.PtrRepLifted
                                                                                       @ GHC.Types.Bool
                                                                                       (\ (s :: GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld)[OneShot] ->
                                                                                        case GHC.Prim.noDuplicate#
                                                                                               s of s' { DEFAULT ->
                                                                                        case GHC.Prim.makeStableName#
                                                                                               @ a
                                                                                               x1
                                                                                               s' of ds { (#,#) ipv ipv1 ->
                                                                                        case GHC.Prim.makeStableName#
                                                                                               @ a
                                                                                               y1
                                                                                               ipv of ds1 { (#,#) ipv2 ipv3 ->
                                                                                        (# ipv2,
                                                                                           case GHC.Prim.eqStableName#
                                                                                                  @ a
                                                                                                  @ a
                                                                                                  ipv1
                                                                                                  ipv3 of ds2 {
                                                                                             DEFAULT
                                                                                             -> GHC.Types.True
                                                                                             0#
                                                                                             -> GHC.Types.False } #) } } }) of ds { (#,#) ipv ipv1 ->
                                                                                ipv1 } } }) -}
f507a1c6062319378c29a702b431de9c
  (====) :: GHC.Classes.Eq a => a -> a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (x :: a) (y :: a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.====} True True} case SPL.===
                                                                                        @ a
                                                                                        x
                                                                                        y of wild {
                                                                                   GHC.Types.False
                                                                                   -> GHC.Classes.==
                                                                                        @ a
                                                                                        $dEq
                                                                                        x
                                                                                        y
                                                                                   GHC.Types.True
                                                                                   -> GHC.Types.True }) -}
87f0063d59e7490ea342e03db4c9724e
  type PresenceCondition = PropBDD.Prop
5998f233e4b9e9e9b4ccf5363567d7ac
  type Val a = (a, SPL.PresenceCondition)
3d3b229fbc24d03635a863a001709584
  newtype Var t = Var [SPL.Val t]
3d3b229fbc24d03635a863a001709584
  apply :: SPL.Var (a -> b) -> SPL.Var a -> SPL.Var b
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: NOINLINE -}
71c2f331db0bce2c1f412a396eec83c2
  apply_ :: SPL.Val (a -> b) -> SPL.Var a -> SPL.Var b
  {- Arity: 2, Strictness: <S,1*U(C(U),U)><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b (w :: SPL.Val (a -> b)) (w1 :: SPL.Var a) ->
                 case w of ww { (,) ww1 ww2 -> SPL.$wapply_ @ a @ b ww1 ww2 w1 }) -}
3d3b229fbc24d03635a863a001709584
  compact :: SPL.Var t -> SPL.Var t
  {- Unfolding: (\ @ t ->
                 ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.compact} True False} GHC.Base.id)
                   @ (SPL.Var t)) -}
a31b29d6b9d759c2f697e5630d5a16d4
  compactEq :: GHC.Classes.Eq t => SPL.Var t -> SPL.Var t
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t ($dEq :: GHC.Classes.Eq t) -> SPL.$fEqVar2 @ t) -}
d4a32db5b6b4c1d4c2b8db1739037731
  cond :: GHC.Types.Bool -> a -> a -> a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a (p :: GHC.Types.Bool) (a1 :: a) (b :: a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.cond} True True} case p of wild {
                                                                                   GHC.Types.False
                                                                                   -> b
                                                                                   GHC.Types.True
                                                                                   -> a1 }) -}
7f2435c157c3b646591dbab164246d80
  cond' ::
    GHC.Show.Show a =>
    SPL.Var GHC.Types.Bool -> SPL.Var a -> SPL.Var a -> SPL.Var a
  {- Arity: 4, Strictness: <L,A><S,1*U><L,U><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: SPL.Var GHC.Types.Bool)
                   (w2 :: SPL.Var a)
                   (w3 :: SPL.Var a) ->
                 SPL.$wcond' @ a w1 w2 w3) -}
fe3ef5c24d92b83a38b6638f3f51f7c2
  cond'1 :: [SPL.Var a] -> SPL.Var a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b4abb79d46b8f739c05c76f8cb393a3c
  cond'2 :: SPL.PresenceCondition -> SPL.Var t -> [(t, PropBDD.Prop)]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ t
                   (pc :: SPL.PresenceCondition)
                   (ds :: SPL.Var t) ->
                 let {
                   lvl1 :: [PropBDD.Prop]
                   = GHC.Types.: @ PropBDD.Prop pc (GHC.Types.[] @ PropBDD.Prop)
                 } in
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.restrict} True True} letrec {
                                                                                       go :: [(t,
                                                                                               PropBDD.Prop)]
                                                                                             -> [(t,
                                                                                                  PropBDD.Prop)]
                                                                                         {- Arity: 1,
                                                                                            Strictness: <S,1*U> -}
                                                                                       = \ (ds1 :: [(t,
                                                                                                     PropBDD.Prop)]) ->
                                                                                         case ds1 of wild {
                                                                                           []
                                                                                           -> GHC.Types.[]
                                                                                                @ (t,
                                                                                                   PropBDD.Prop)
                                                                                           : y ys
                                                                                           -> case y of wild1 { (,) x pc' ->
                                                                                              let {
                                                                                                pc'1 :: PropBDD.Prop
                                                                                                = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.restrict.\} False True} PropBDD.conj
                                                                                                                                                                           (GHC.Types.:
                                                                                                                                                                              @ PropBDD.Prop
                                                                                                                                                                              pc'
                                                                                                                                                                              lvl1)
                                                                                              } in
                                                                                              {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.restrict.\} True False} case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.restrict.\} True True} PropBDD.sat
                                                                                                                                                                                                                                                  pc'1 of wild2 {
                                                                                                                                                                       GHC.Types.False
                                                                                                                                                                       -> go
                                                                                                                                                                            ys
                                                                                                                                                                       GHC.Types.True
                                                                                                                                                                       -> GHC.Types.:
                                                                                                                                                                            @ (t,
                                                                                                                                                                               PropBDD.Prop)
                                                                                                                                                                            (x,
                                                                                                                                                                             pc'1)
                                                                                                                                                                            (go
                                                                                                                                                                               ys) } } }
                                                                                     } in
                                                                                     go
                                                                                       ds
                                                                                         `cast`
                                                                                       (SPL.N:Var[0]
                                                                                            <t>_R)) -}
ddfdbdfb7af09298de1a14224387ff20
  definedAt :: SPL.Var t -> SPL.PresenceCondition
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t (ds :: SPL.Var t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.definedAt} True True} PropBDD.disj
                                                                                        ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.definedAt.pcs} True True} GHC.Base.build
                                                                                                                                                                    @ Cudd.Cudd.DDNode
                                                                                                                                                                    (\ @ b1
                                                                                                                                                                       (c :: Cudd.Cudd.DDNode
                                                                                                                                                                             -> b1
                                                                                                                                                                             -> b1)[OneShot]
                                                                                                                                                                       (n :: b1)[OneShot] ->
                                                                                                                                                                     GHC.Base.foldr
                                                                                                                                                                       @ (t,
                                                                                                                                                                          SPL.PresenceCondition)
                                                                                                                                                                       @ b1
                                                                                                                                                                       (GHC.Base.mapFB
                                                                                                                                                                          @ Cudd.Cudd.DDNode
                                                                                                                                                                          @ b1
                                                                                                                                                                          @ (t,
                                                                                                                                                                             SPL.PresenceCondition)
                                                                                                                                                                          c
                                                                                                                                                                          (Data.Tuple.snd
                                                                                                                                                                             @ t
                                                                                                                                                                             @ SPL.PresenceCondition))
                                                                                                                                                                       n
                                                                                                                                                                       ds
                                                                                                                                                                         `cast`
                                                                                                                                                                       (SPL.N:Var[0]
                                                                                                                                                                            <t>_R)))) -}
1a87b21fcc19b78248db3cf9384a442d
  exists ::
    GHC.Classes.Eq t => SPL.Val t -> SPL.Var t -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,1*U(U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   (w :: GHC.Classes.Eq t)
                   (w1 :: SPL.Val t)
                   (w2 :: SPL.Var t) ->
                 case w1 of ww { (,) ww1 ww2 -> SPL.$wexists @ t w ww1 ww2 w2 }) -}
8a33c8cc5272c589540efdb7e22af9c3
  filterLifted ::
    SPL.Var (a -> GHC.Types.Bool) -> SPL.Var [a] -> SPL.Var [a]
  {- Unfolding: (\ @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.filterLifted} True False} \ (eta1 :: SPL.Var
                                                                                                       (a
                                                                                                        -> GHC.Types.Bool))
                                                                                            (eta2 :: SPL.Var
                                                                                                       [a]) ->
                                                                                          {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.filterLifted} False True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                     @ [a]
                                                                                                                                                                     @ [a]
                                                                                                                                                                     (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                                         @ (a
                                                                                                                                                                                                                                            -> GHC.Types.Bool)
                                                                                                                                                                                                                                         @ ([a]
                                                                                                                                                                                                                                            -> [a])
                                                                                                                                                                                                                                         (SPL.filterLifted1
                                                                                                                                                                                                                                            @ a))
                                                                                                                                                                        eta1)
                                                                                                                                                                     eta2) -}
8214b4e0ddd6a265cff053d064837596
  filterLifted1 :: SPL.Var ((a -> GHC.Types.Bool) -> [a] -> [a])
  {- Unfolding: (\ @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.filterLifted} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} False True} SPL.mkVarT
                                                                                                                                                             @ ((a
                                                                                                                                                                 -> GHC.Types.Bool)
                                                                                                                                                                -> [a]
                                                                                                                                                                -> [a])
                                                                                                                                                             (GHC.List.filter
                                                                                                                                                                @ a)) -}
febcd50bcf4ff08929764a16a82c9aad
  findVal ::
    t -> [SPL.Val t] -> (t -> t -> GHC.Types.Bool) -> [SPL.Val t]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,C(C1(U))> -}
95ee7f848fc34b7c3a730da496b88605
  getAllConfigs :: [PropBDD.Prop] -> [PropBDD.Prop]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [PropBDD.Prop]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs} True True} case ds of wild {
                                                                                            []
                                                                                            -> GHC.Types.[]
                                                                                                 @ PropBDD.Prop
                                                                                            : f ds1
                                                                                            -> case ds1 of wild1 {
                                                                                                 []
                                                                                                 -> GHC.Types.:
                                                                                                      @ PropBDD.Prop
                                                                                                      f
                                                                                                      (GHC.Types.:
                                                                                                         @ PropBDD.Prop
                                                                                                         (PropBDD.neg
                                                                                                            f)
                                                                                                         (GHC.Types.[]
                                                                                                            @ PropBDD.Prop))
                                                                                                 : ipv ipv1
                                                                                                 -> let {
                                                                                                      rest :: [PropBDD.Prop]
                                                                                                      = {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs.rest} True True} SPL.getAllConfigs_$sgetAllConfigs
                                                                                                                                                                                        ipv
                                                                                                                                                                                        ipv1
                                                                                                    } in
                                                                                                    GHC.Base.++
                                                                                                      @ Cudd.Cudd.DDNode
                                                                                                      ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs.fPos} True True} GHC.Base.map
                                                                                                                                                                                       @ Cudd.Cudd.DDNode
                                                                                                                                                                                       @ Cudd.Cudd.DDNode
                                                                                                                                                                                       (\ (r :: PropBDD.Prop) ->
                                                                                                                                                                                        {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs.fPos.\} True True} PropBDD.conj
                                                                                                                                                                                                                                                                          (GHC.Types.:
                                                                                                                                                                                                                                                                             @ PropBDD.Prop
                                                                                                                                                                                                                                                                             f
                                                                                                                                                                                                                                                                             (GHC.Types.:
                                                                                                                                                                                                                                                                                @ PropBDD.Prop
                                                                                                                                                                                                                                                                                r
                                                                                                                                                                                                                                                                                (GHC.Types.[]
                                                                                                                                                                                                                                                                                   @ PropBDD.Prop))))
                                                                                                                                                                                       rest)
                                                                                                      ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs.fNeg} True True} GHC.Base.map
                                                                                                                                                                                       @ Cudd.Cudd.DDNode
                                                                                                                                                                                       @ Cudd.Cudd.DDNode
                                                                                                                                                                                       (\ (r :: PropBDD.Prop) ->
                                                                                                                                                                                        {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getAllConfigs.fNeg.\} True True} PropBDD.conj
                                                                                                                                                                                                                                                                          (GHC.Types.:
                                                                                                                                                                                                                                                                             @ PropBDD.Prop
                                                                                                                                                                                                                                                                             (PropBDD.neg
                                                                                                                                                                                                                                                                                f)
                                                                                                                                                                                                                                                                             (GHC.Types.:
                                                                                                                                                                                                                                                                                @ PropBDD.Prop
                                                                                                                                                                                                                                                                                r
                                                                                                                                                                                                                                                                                (GHC.Types.[]
                                                                                                                                                                                                                                                                                   @ PropBDD.Prop))))
                                                                                                                                                                                       rest) } }) -}
005d47623f8067d240ac632911a6bb6b
  getAllConfigs_$sgetAllConfigs ::
    Cudd.Cudd.DDNode -> [Cudd.Cudd.DDNode] -> [PropBDD.Prop]
  {- Arity: 2, Strictness: <L,U><L,U> -}
40c5b2ad78f6f76992cf278d0e8182d2
  getValidConfigs ::
    [PropBDD.Prop] -> SPL.PresenceCondition -> [PropBDD.Prop]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (univ :: [PropBDD.Prop])
                   (featModel :: SPL.PresenceCondition) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getValidConfigs} True True} GHC.List.filter
                                                                                              @ Cudd.Cudd.DDNode
                                                                                              (\ (c :: PropBDD.Prop) ->
                                                                                               {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getValidConfigs.\} True True} let {
                                                                                                                                                                              p :: PropBDD.Prop
                                                                                                                                                                              = PropBDD.conj
                                                                                                                                                                                  (GHC.Types.:
                                                                                                                                                                                     @ PropBDD.Prop
                                                                                                                                                                                     c
                                                                                                                                                                                     (GHC.Types.:
                                                                                                                                                                                        @ PropBDD.Prop
                                                                                                                                                                                        featModel
                                                                                                                                                                                        (GHC.Types.[]
                                                                                                                                                                                           @ PropBDD.Prop)))
                                                                                                                                                                            } in
                                                                                                                                                                            {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:PropBDD.sat} True True} Cudd.Cudd.$fEqDDNode1
                                                                                                                                                                                                                                                 p `cast`
                                                                                                                                                                                                                                                 (Cudd.Cudd.N:DDNode[0])
                                                                                                                                                                                                                                                 PropBDD.ff
                                                                                                                                                                                                                                                   `cast`
                                                                                                                                                                                                                                                 (Cudd.Cudd.N:DDNode[0]))
                                                                                              ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.getValidConfigs.cs} True True} SPL.getAllConfigs
                                                                                                                                                                               univ)) -}
35c66b2d3054f47cd42fe2104ffb8aa9
  groupVals ::
    [SPL.Val t] -> (t -> t -> GHC.Types.Bool) -> [SPL.Val t]
  {- Arity: 2, Strictness: <S,1*U><L,C(C1(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t (xs :: [SPL.Val t]) (cmp :: t -> t -> GHC.Types.Bool) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.groupVals} True True} SPL.groupVals_
                                                                                        @ t
                                                                                        xs
                                                                                        (GHC.Types.[]
                                                                                           @ t)
                                                                                        cmp) -}
032b44e7ee278ed3878bbd1273257f23
  groupVals_ ::
    [SPL.Val t] -> [t] -> (t -> t -> GHC.Types.Bool) -> [SPL.Val t]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,C(C1(U))> -}
f762904fa65b52d714ad705cbb8de418
  index :: SPL.Var t -> SPL.PresenceCondition -> [t]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ t
                   (ds :: SPL.Var t)
                   (pc :: SPL.PresenceCondition) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.index} True True} case SPL.index1
                                                                                         @ t
                                                                                         ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.index.v'} True True} GHC.List.filter
                                                                                                                                                                @ (t,
                                                                                                                                                                   PropBDD.Prop)
                                                                                                                                                                (\ (ds1 :: (t,
                                                                                                                                                                            PropBDD.Prop)) ->
                                                                                                                                                                 case ds1 of wild { (,) x' pc' ->
                                                                                                                                                                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.index.v'.\} True True} let {
                                                                                                                                                                                                                                         p :: PropBDD.Prop
                                                                                                                                                                                                                                         = PropBDD.conj
                                                                                                                                                                                                                                             (GHC.Types.:
                                                                                                                                                                                                                                                @ PropBDD.Prop
                                                                                                                                                                                                                                                pc
                                                                                                                                                                                                                                                (GHC.Types.:
                                                                                                                                                                                                                                                   @ PropBDD.Prop
                                                                                                                                                                                                                                                   pc'
                                                                                                                                                                                                                                                   (GHC.Types.[]
                                                                                                                                                                                                                                                      @ PropBDD.Prop)))
                                                                                                                                                                                                                                       } in
                                                                                                                                                                                                                                       {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:PropBDD.sat} True True} Cudd.Cudd.$fEqDDNode1
                                                                                                                                                                                                                                                                                                            p `cast`
                                                                                                                                                                                                                                                                                                            (Cudd.Cudd.N:DDNode[0])
                                                                                                                                                                                                                                                                                                            PropBDD.ff
                                                                                                                                                                                                                                                                                                              `cast`
                                                                                                                                                                                                                                                                                                            (Cudd.Cudd.N:DDNode[0]) })
                                                                                                                                                                ds
                                                                                                                                                                  `cast`
                                                                                                                                                                (SPL.N:Var[0]
                                                                                                                                                                     <t>_R)) of ww { (#,#) ww1 ww2 ->
                                                                                  ww1 }) -}
1e66e4aacaa419336d8e339c9be91e99
  index1 :: [(t, PropBDD.Prop)] -> (# [t], [PropBDD.Prop] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
f685197f879d3285a45f5d06b12eda5d
  inv :: GHC.Show.Show t => SPL.Var t -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,A><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SPL.inv1
                  `cast`
                (forall (t :: <*>_N).
                 <GHC.Show.Show t>_R
                 ->_R <SPL.Var t>_R
                 ->_R Data.Monoid.N:All[0]) -}
3b7f0c8a48b55779d5c5101a57a417bf
  inv1 :: GHC.Show.Show t => SPL.Var t -> Data.Monoid.All
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ @ t (w :: GHC.Show.Show t) (w1 :: SPL.Var t) ->
                 SPL.$winv @ t w1) -}
442abdac5d062984fee977301e9c1b98
  inv2 :: [((t, PropBDD.Prop), (t, PropBDD.Prop))] -> Data.Monoid.All
  {- Arity: 1, Strictness: <S,1*U> -}
77fea6f3bd38d768ba556359d1ee6712
  isSubsetOf ::
    GHC.Classes.Eq t => SPL.Var t -> SPL.Var t -> GHC.Types.Bool
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SPL.$fEqVar1
                  `cast`
                (forall (t :: <*>_N).
                 <GHC.Classes.Eq t>_R
                 ->_R <SPL.Var t>_R
                 ->_R <SPL.Var t>_R
                 ->_R Data.Monoid.N:All[0]) -}
3bedd942f1ca4020b16e3f5e12faa1e4
  liftA4 ::
    GHC.Base.Applicative f =>
    (a -> b -> c -> d -> e) -> f a -> f b -> f c -> f d -> f e
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U,A,C(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: a -> b -> c -> d -> e)
                   (eta1 :: f a)
                   (eta2 :: f b)
                   (eta3 :: f c)
                   (eta4 :: f d) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftA4} True True} GHC.Base.<*>
                                                                                     @ f
                                                                                     $dApplicative
                                                                                     @ d
                                                                                     @ e
                                                                                     (GHC.Base.<*>
                                                                                        @ f
                                                                                        $dApplicative
                                                                                        @ c
                                                                                        @ (d -> e)
                                                                                        (GHC.Base.<*>
                                                                                           @ f
                                                                                           $dApplicative
                                                                                           @ b
                                                                                           @ (c
                                                                                              -> d
                                                                                              -> e)
                                                                                           (GHC.Base.fmap
                                                                                              @ f
                                                                                              $dFunctor
                                                                                              @ a
                                                                                              @ (b
                                                                                                 -> c
                                                                                                 -> d
                                                                                                 -> e)
                                                                                              eta
                                                                                              eta1)
                                                                                           eta2)
                                                                                        eta3)
                                                                                     eta4) -}
15d00f69455e0e48d31c45fb466c3ba3
  liftA5 ::
    GHC.Base.Applicative f =>
    (a -> b -> c -> d -> e -> g)
    -> f a -> f b -> f c -> f d -> f e -> f g
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LL),U(1*U,A,C(C1(U)),A,A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ @ (f :: * -> *)
                   @ a
                   @ b
                   @ c
                   @ d
                   @ e
                   @ g
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: a -> b -> c -> d -> e -> g)
                   (eta1 :: f a)
                   (eta2 :: f b)
                   (eta3 :: f c)
                   (eta4 :: f d)
                   (eta5 :: f e) ->
                 let {
                   $dFunctor :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftA5} True True} GHC.Base.<*>
                                                                                     @ f
                                                                                     $dApplicative
                                                                                     @ e
                                                                                     @ g
                                                                                     (GHC.Base.<*>
                                                                                        @ f
                                                                                        $dApplicative
                                                                                        @ d
                                                                                        @ (e -> g)
                                                                                        (GHC.Base.<*>
                                                                                           @ f
                                                                                           $dApplicative
                                                                                           @ c
                                                                                           @ (d
                                                                                              -> e
                                                                                              -> g)
                                                                                           (GHC.Base.<*>
                                                                                              @ f
                                                                                              $dApplicative
                                                                                              @ b
                                                                                              @ (c
                                                                                                 -> d
                                                                                                 -> e
                                                                                                 -> g)
                                                                                              (GHC.Base.fmap
                                                                                                 @ f
                                                                                                 $dFunctor
                                                                                                 @ a
                                                                                                 @ (b
                                                                                                    -> c
                                                                                                    -> d
                                                                                                    -> e
                                                                                                    -> g)
                                                                                                 eta
                                                                                                 eta1)
                                                                                              eta2)
                                                                                           eta3)
                                                                                        eta4)
                                                                                     eta5) -}
d3d571acbb557897923fbe19b0074cfe
  liftV :: (a -> b) -> SPL.Var a -> SPL.Var b
  {- Unfolding: (\ @ a @ b ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV} True False} \ (f1 :: a
                                                                                            -> b)
                                                                                     (a1 :: SPL.Var
                                                                                              a) ->
                                                                                   {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV} False True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                       @ a
                                                                                                                                                       @ b
                                                                                                                                                       (SPL.$fApplicativeVar_$cpure
                                                                                                                                                          @ (a
                                                                                                                                                             -> b)
                                                                                                                                                          f1)
                                                                                                                                                       a1) -}
3477cc1444e325184c90a12dc48ccbf5
  liftV2 :: (a -> b -> c) -> SPL.Var a -> SPL.Var b -> SPL.Var c
  {- Unfolding: (\ @ a @ b @ c ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV2} True False} \ (eta :: a
                                                                                              -> b
                                                                                              -> c)
                                                                                      (eta1 :: SPL.Var
                                                                                                 a)
                                                                                      (eta2 :: SPL.Var
                                                                                                 b) ->
                                                                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV2} False True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                         @ b
                                                                                                                                                         @ c
                                                                                                                                                         (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                             @ a
                                                                                                                                                                                                                             @ (b
                                                                                                                                                                                                                                -> c)
                                                                                                                                                                                                                             (SPL.mkVarT
                                                                                                                                                                                                                                @ (a
                                                                                                                                                                                                                                   -> b
                                                                                                                                                                                                                                   -> c)
                                                                                                                                                                                                                                eta))
                                                                                                                                                            eta1)
                                                                                                                                                         eta2) -}
79bccd5f6198be08d0eb76cd55a322f6
  liftV3 ::
    (a -> b -> c -> d)
    -> SPL.Var a -> SPL.Var b -> SPL.Var c -> SPL.Var d
  {- Unfolding: (\ @ a @ b @ c @ d ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV3} True False} \ (eta :: a
                                                                                              -> b
                                                                                              -> c
                                                                                              -> d)
                                                                                      (eta1 :: SPL.Var
                                                                                                 a)
                                                                                      (eta2 :: SPL.Var
                                                                                                 b)
                                                                                      (eta3 :: SPL.Var
                                                                                                 c) ->
                                                                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV3} False True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                         @ c
                                                                                                                                                         @ d
                                                                                                                                                         (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                            @ b
                                                                                                                                                            @ (c
                                                                                                                                                               -> d)
                                                                                                                                                            (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                                @ a
                                                                                                                                                                                                                                @ (b
                                                                                                                                                                                                                                   -> c
                                                                                                                                                                                                                                   -> d)
                                                                                                                                                                                                                                (SPL.mkVarT
                                                                                                                                                                                                                                   @ (a
                                                                                                                                                                                                                                      -> b
                                                                                                                                                                                                                                      -> c
                                                                                                                                                                                                                                      -> d)
                                                                                                                                                                                                                                   eta))
                                                                                                                                                               eta1)
                                                                                                                                                            eta2)
                                                                                                                                                         eta3) -}
d5e00511fdda1db7e684bb64ed0cf680
  liftV4 ::
    (a -> b -> c -> d -> e)
    -> SPL.Var a -> SPL.Var b -> SPL.Var c -> SPL.Var d -> SPL.Var e
  {- Unfolding: (\ @ a @ b @ c @ d @ e ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV4} True False} \ (eta :: a
                                                                                              -> b
                                                                                              -> c
                                                                                              -> d
                                                                                              -> e)
                                                                                      (eta1 :: SPL.Var
                                                                                                 a)
                                                                                      (eta2 :: SPL.Var
                                                                                                 b)
                                                                                      (eta3 :: SPL.Var
                                                                                                 c)
                                                                                      (eta4 :: SPL.Var
                                                                                                 d) ->
                                                                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV4} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftA4} True True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                           @ d
                                                                                                                                                                                                                           @ e
                                                                                                                                                                                                                           (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                              @ c
                                                                                                                                                                                                                              @ (d
                                                                                                                                                                                                                                 -> e)
                                                                                                                                                                                                                              (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                                 @ b
                                                                                                                                                                                                                                 @ (c
                                                                                                                                                                                                                                    -> d
                                                                                                                                                                                                                                    -> e)
                                                                                                                                                                                                                                 (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                                                                                                     @ a
                                                                                                                                                                                                                                                                                                     @ (b
                                                                                                                                                                                                                                                                                                        -> c
                                                                                                                                                                                                                                                                                                        -> d
                                                                                                                                                                                                                                                                                                        -> e)
                                                                                                                                                                                                                                                                                                     (SPL.mkVarT
                                                                                                                                                                                                                                                                                                        @ (a
                                                                                                                                                                                                                                                                                                           -> b
                                                                                                                                                                                                                                                                                                           -> c
                                                                                                                                                                                                                                                                                                           -> d
                                                                                                                                                                                                                                                                                                           -> e)
                                                                                                                                                                                                                                                                                                        eta))
                                                                                                                                                                                                                                    eta1)
                                                                                                                                                                                                                                 eta2)
                                                                                                                                                                                                                              eta3)
                                                                                                                                                                                                                           eta4) -}
6dfdcf7788494ae705254fc913c0cbdf
  liftV5 ::
    (a -> b -> c -> d -> e -> f)
    -> SPL.Var a
    -> SPL.Var b
    -> SPL.Var c
    -> SPL.Var d
    -> SPL.Var e
    -> SPL.Var f
  {- Unfolding: (\ @ a @ b @ c @ d @ e @ f ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV5} True False} \ (eta :: a
                                                                                              -> b
                                                                                              -> c
                                                                                              -> d
                                                                                              -> e
                                                                                              -> f)
                                                                                      (eta1 :: SPL.Var
                                                                                                 a)
                                                                                      (eta2 :: SPL.Var
                                                                                                 b)
                                                                                      (eta3 :: SPL.Var
                                                                                                 c)
                                                                                      (eta4 :: SPL.Var
                                                                                                 d)
                                                                                      (eta5 :: SPL.Var
                                                                                                 e) ->
                                                                                    {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftV5} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.liftA5} True True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                           @ e
                                                                                                                                                                                                                           @ f
                                                                                                                                                                                                                           (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                              @ d
                                                                                                                                                                                                                              @ (e
                                                                                                                                                                                                                                 -> f)
                                                                                                                                                                                                                              (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                                 @ c
                                                                                                                                                                                                                                 @ (d
                                                                                                                                                                                                                                    -> e
                                                                                                                                                                                                                                    -> f)
                                                                                                                                                                                                                                 (SPL.$fApplicativeVar_$c<*>
                                                                                                                                                                                                                                    @ b
                                                                                                                                                                                                                                    @ (c
                                                                                                                                                                                                                                       -> d
                                                                                                                                                                                                                                       -> e
                                                                                                                                                                                                                                       -> f)
                                                                                                                                                                                                                                    (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                                                                                                        @ a
                                                                                                                                                                                                                                                                                                        @ (b
                                                                                                                                                                                                                                                                                                           -> c
                                                                                                                                                                                                                                                                                                           -> d
                                                                                                                                                                                                                                                                                                           -> e
                                                                                                                                                                                                                                                                                                           -> f)
                                                                                                                                                                                                                                                                                                        (SPL.mkVarT
                                                                                                                                                                                                                                                                                                           @ (a
                                                                                                                                                                                                                                                                                                              -> b
                                                                                                                                                                                                                                                                                                              -> c
                                                                                                                                                                                                                                                                                                              -> d
                                                                                                                                                                                                                                                                                                              -> e
                                                                                                                                                                                                                                                                                                              -> f)
                                                                                                                                                                                                                                                                                                           eta))
                                                                                                                                                                                                                                       eta1)
                                                                                                                                                                                                                                    eta2)
                                                                                                                                                                                                                                 eta3)
                                                                                                                                                                                                                              eta4)
                                                                                                                                                                                                                           eta5) -}
f6c925efce987281b5d8841500f5ba2b
  mapLifted :: SPL.Var (a -> b) -> SPL.Var [a] -> SPL.Var [b]
  {- Unfolding: (\ @ a @ b ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mapLifted} True False} \ (eta1 :: SPL.Var
                                                                                                    (a
                                                                                                     -> b))
                                                                                         (eta2 :: SPL.Var
                                                                                                    [a]) ->
                                                                                       {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mapLifted} False True} SPL.$fApplicativeVar_$c<*>
                                                                                                                                                               @ [a]
                                                                                                                                                               @ [b]
                                                                                                                                                               (({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} True True} SPL.apply
                                                                                                                                                                                                                                   @ (a
                                                                                                                                                                                                                                      -> b)
                                                                                                                                                                                                                                   @ ([a]
                                                                                                                                                                                                                                      -> [b])
                                                                                                                                                                                                                                   (SPL.mapLifted1
                                                                                                                                                                                                                                      @ b
                                                                                                                                                                                                                                      @ a))
                                                                                                                                                                  eta1)
                                                                                                                                                               eta2) -}
fde522f1791eb052f73e97acecfc6768
  mapLifted1 :: SPL.Var ((a -> b) -> [a] -> [b])
  {- Unfolding: (\ @ b @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mapLifted} False True} {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.fmap} False True} SPL.mkVarT
                                                                                                                                                          @ ((a
                                                                                                                                                              -> b)
                                                                                                                                                             -> [a]
                                                                                                                                                             -> [b])
                                                                                                                                                          (GHC.Base.map
                                                                                                                                                             @ a
                                                                                                                                                             @ b)) -}
8ea2729b1e1bf9fc32fbe2771febad71
  mkVar :: t -> SPL.PresenceCondition -> SPL.Var t
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                SPL.mkVar1
                  `cast`
                (forall (t :: <*>_N).
                 <t>_R
                 ->_R <SPL.PresenceCondition>_R
                 ->_R Sym (SPL.N:Var[0] <t>_R)) -}
712a145a21fa14016feda9f4610a6f21
  mkVar1 :: t -> SPL.PresenceCondition -> [SPL.Val t]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ t (v :: t) (pc :: SPL.PresenceCondition) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mkVar} True False} GHC.Types.:
                                                                                     @ (SPL.Val t)
                                                                                     (v, pc)
                                                                                     (GHC.Types.[]
                                                                                        @ (SPL.Val
                                                                                             t))) -}
3d3b229fbc24d03635a863a001709584
  mkVarT :: t -> SPL.Var t
  {- Arity: 1, Strictness: <L,U>m2, Inline: NOINLINE -}
14e61503c3f30d5715b2d7005082b6c3
  mkVars :: [(t, SPL.PresenceCondition)] -> SPL.Var t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SPL.mkVars1
                  `cast`
                (forall (t :: <*>_N).
                 <[(t, SPL.PresenceCondition)]>_R ->_R Sym (SPL.N:Var[0] <t>_R)) -}
5508bee86e316a431e072d2a0188f31e
  mkVars1 ::
    [(t, SPL.PresenceCondition)] -> [(t, SPL.PresenceCondition)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (vs :: [(t, SPL.PresenceCondition)]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.mkVars} True False} vs) -}
d9e0f94fd860450baf7157c35dd4296f
  pairs :: [t] -> [(t, t)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t (ds :: [t]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.pairs} True True} case ds of wild {
                                                                                    []
                                                                                    -> GHC.Types.[]
                                                                                         @ (t, t)
                                                                                    : ipv ipv1
                                                                                    -> GHC.Base.build
                                                                                         @ (t, t)
                                                                                         (\ @ b1
                                                                                            (c :: (t,
                                                                                                   t)
                                                                                                  -> b1
                                                                                                  -> b1)[OneShot]
                                                                                            (n :: b1)[OneShot] ->
                                                                                          GHC.List.foldr2
                                                                                            @ t
                                                                                            @ t
                                                                                            @ b1
                                                                                            (GHC.List.zipFB
                                                                                               @ t
                                                                                               @ t
                                                                                               @ b1
                                                                                               @ b1
                                                                                               c)
                                                                                            n
                                                                                            wild
                                                                                            ipv1) }) -}
7d3351e11ed64acbc90d7d4985cd0af4
  phelem :: t -> [t] -> (t -> t -> GHC.Types.Bool) -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                SPL.phelem1
                  `cast`
                (forall (t :: <*>_N).
                 <t>_R
                 ->_R <[t]>_R
                 ->_R <t -> t -> GHC.Types.Bool>_R
                 ->_R Data.Monoid.N:Any[0]) -}
cac7c9ac7b37ef11ad804e8299d7953c
  phelem1 ::
    t -> [t] -> (t -> t -> GHC.Types.Bool) -> Data.Monoid.Any
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,C(C1(U))>,
     Unfolding: (\ @ t
                   (v :: t)
                   (xs :: [t])
                   (cmp :: t -> t -> GHC.Types.Bool) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.phelem} True True} letrec {
                                                                                     go :: [t]
                                                                                           -> Data.Monoid.Any
                                                                                       {- Arity: 1,
                                                                                          Strictness: <S,1*U> -}
                                                                                     = \ (ds :: [t]) ->
                                                                                       case ds of wild {
                                                                                         []
                                                                                         -> GHC.Types.False
                                                                                              `cast`
                                                                                            (Sym (Data.Monoid.N:Any[0]))
                                                                                         : y ys
                                                                                         -> case {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.phelem.\} True True} cmp
                                                                                                                                                                       v
                                                                                                                                                                       y of wild1 {
                                                                                              GHC.Types.False
                                                                                              -> go
                                                                                                   ys
                                                                                              GHC.Types.True
                                                                                              -> GHC.Types.True
                                                                                                   `cast`
                                                                                                 (Sym (Data.Monoid.N:Any[0])) } }
                                                                                   } in
                                                                                   go xs) -}
48d6d5d2ea9f40bc29e58b54d3a7fea4
  restrict :: SPL.PresenceCondition -> SPL.Var t -> SPL.Var t
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SPL.cond'2
                  `cast`
                (forall (t :: <*>_N).
                 <SPL.PresenceCondition>_R
                 ->_R <SPL.Var t>_R
                 ->_R Sym (SPL.N:Var[0] <t>_R)) -}
6260490d430b9b889c198589c33be89b
  subst :: SPL.Var t -> SPL.PresenceCondition -> SPL.Var t
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                SPL.subst1
                  `cast`
                (forall (t :: <*>_N).
                 <SPL.Var t>_R
                 ->_R <SPL.PresenceCondition>_R
                 ->_R Sym (SPL.N:Var[0] <t>_R)) -}
e8489224021e09e2a8fba4eade429393
  subst1 :: SPL.Var t -> SPL.PresenceCondition -> [(t, PropBDD.Prop)]
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ @ t
                   (ds :: SPL.Var t)
                   (pc :: SPL.PresenceCondition) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.subst} True True} GHC.List.filter
                                                                                    @ (t,
                                                                                       PropBDD.Prop)
                                                                                    (\ (ds1 :: (t,
                                                                                                PropBDD.Prop)) ->
                                                                                     case ds1 of wild { (,) ds2 pc' ->
                                                                                     {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.subst.\} True True} let {
                                                                                                                                                          p :: PropBDD.Prop
                                                                                                                                                          = PropBDD.conj
                                                                                                                                                              (GHC.Types.:
                                                                                                                                                                 @ PropBDD.Prop
                                                                                                                                                                 pc
                                                                                                                                                                 (GHC.Types.:
                                                                                                                                                                    @ PropBDD.Prop
                                                                                                                                                                    pc'
                                                                                                                                                                    (GHC.Types.[]
                                                                                                                                                                       @ PropBDD.Prop)))
                                                                                                                                                        } in
                                                                                                                                                        {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:PropBDD.sat} True True} Cudd.Cudd.$fEqDDNode1
                                                                                                                                                                                                                             p `cast`
                                                                                                                                                                                                                             (Cudd.Cudd.N:DDNode[0])
                                                                                                                                                                                                                             PropBDD.ff
                                                                                                                                                                                                                               `cast`
                                                                                                                                                                                                                             (Cudd.Cudd.N:DDNode[0]) })
                                                                                    ds
                                                                                      `cast`
                                                                                    (SPL.N:Var[0]
                                                                                         <t>_R)) -}
b35ff8327766aba4a3531780a3f88ce6
  undefinedAt :: SPL.Var t -> SPL.PresenceCondition
  {- Unfolding: (\ @ t ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.undefinedAt} True False} \ (x :: SPL.Var
                                                                                                   t) ->
                                                                                         {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.undefinedAt} False True} PropBDD.neg
                                                                                                                                                                   (SPL.definedAt
                                                                                                                                                                      @ t
                                                                                                                                                                      x)) -}
23a5a9173b49ea7f422cf80e0f714d5a
  union :: SPL.Var t -> SPL.Var t -> SPL.Var t
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                SPL.union1
                  `cast`
                (forall (t :: <*>_N).
                 <SPL.Var t>_R ->_R <SPL.Var t>_R ->_R Sym (SPL.N:Var[0] <t>_R)) -}
15a9f4d5df4e6f576095da9f37ca13a7
  union1 :: SPL.Var t -> SPL.Var t -> [(t, SPL.PresenceCondition)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ t (ds :: SPL.Var t) (ds1 :: SPL.Var t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.union} True True} GHC.Base.augment
                                                                                    @ (t,
                                                                                       SPL.PresenceCondition)
                                                                                    (\ @ b
                                                                                       (c :: (t,
                                                                                              SPL.PresenceCondition)
                                                                                             -> b
                                                                                             -> b)[OneShot]
                                                                                       (n :: b)[OneShot] ->
                                                                                     GHC.Base.foldr
                                                                                       @ (t,
                                                                                          SPL.PresenceCondition)
                                                                                       @ b
                                                                                       c
                                                                                       n
                                                                                       ds
                                                                                         `cast`
                                                                                       (SPL.N:Var[0]
                                                                                            <t>_R))
                                                                                    ds1
                                                                                      `cast`
                                                                                    (SPL.N:Var[0]
                                                                                         <t>_R)) -}
24a8535807805d6e17d673c7c7172227
  union2 :: SPL.Var (SPL.Var t) -> SPL.Var t
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ t (ds :: SPL.Var (SPL.Var t)) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.union2} True True} let {
                                                                                     xs :: [SPL.Var
                                                                                              t]
                                                                                     = GHC.Base.map
                                                                                         @ (SPL.Var
                                                                                              t,
                                                                                            SPL.PresenceCondition)
                                                                                         @ (SPL.Var
                                                                                              t)
                                                                                         (SPL.union4
                                                                                            @ t)
                                                                                         ds
                                                                                           `cast`
                                                                                         (SPL.N:Var[0]
                                                                                              <SPL.Var
                                                                                                 t>_R)
                                                                                   } in
                                                                                   ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.unions} True True} SPL.union3
                                                                                                                                                        @ t
                                                                                                                                                        xs)
                                                                                     `cast`
                                                                                   (Sym (SPL.N:Var[0]
                                                                                             <t>_R))) -}
0b98fe763a28534a9b5935038f911e03
  union3 :: [SPL.Var t] -> [SPL.Val t]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0c7734499e149dbb110b924c4ba9b208
  union4 :: (SPL.Var t, SPL.PresenceCondition) -> SPL.Var t
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t (ds :: (SPL.Var t, SPL.PresenceCondition)) ->
                 case ds of wild { (,) x pc ->
                 ({__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.union2.\} True True} SPL.cond'2
                                                                                        @ t
                                                                                        pc
                                                                                        x)
                   `cast`
                 (Sym (SPL.N:Var[0] <t>_R)) }) -}
8bbaf25332dd3e4ab9c383c9de093601
  unions :: [SPL.Var t] -> SPL.Var t
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                SPL.unions1
                  `cast`
                (forall (t :: <*>_N).
                 <[SPL.Var t]>_R ->_R Sym (SPL.N:Var[0] <t>_R)) -}
45076dcd13588f2af4098d8712c6aad1
  unions1 :: [SPL.Var t] -> [SPL.Val t]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ t (xs :: [SPL.Var t]) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.unions} True True} SPL.unions2
                                                                                     @ t
                                                                                     xs) -}
327f84b4ce0a7ad9f71819664924bc2b
  unions2 :: [SPL.Var t] -> [SPL.Val t]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
3f527e9adb3cbf3e618be47807769ac8
  valIndex :: GHC.Classes.Eq t => SPL.Var t -> t -> [SPL.Val t]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t ($dEq :: GHC.Classes.Eq t) (ds :: SPL.Var t) (x :: t) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.valIndex} True True} GHC.Base.build
                                                                                       @ (t,
                                                                                          SPL.PresenceCondition)
                                                                                       (\ @ b
                                                                                          (c :: (t,
                                                                                                 SPL.PresenceCondition)
                                                                                                -> b
                                                                                                -> b)[OneShot]
                                                                                          (n :: b)[OneShot] ->
                                                                                        GHC.Base.foldr
                                                                                          @ (t,
                                                                                             SPL.PresenceCondition)
                                                                                          @ b
                                                                                          (GHC.List.filterFB
                                                                                             @ (t,
                                                                                                SPL.PresenceCondition)
                                                                                             @ b
                                                                                             c
                                                                                             (\ (ds1 :: (t,
                                                                                                         SPL.PresenceCondition)) ->
                                                                                              case ds1 of wild { (,) x' pc' ->
                                                                                              {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.valIndex.\} True True} GHC.Classes.==
                                                                                                                                                                      @ t
                                                                                                                                                                      $dEq
                                                                                                                                                                      x'
                                                                                                                                                                      x }))
                                                                                          n
                                                                                          ds
                                                                                            `cast`
                                                                                          (SPL.N:Var[0]
                                                                                               <t>_R))) -}
1fcdb0071b96c7596041adf6a17e9c39
  (|+|) :: GHC.Num.Num a => SPL.Var a -> SPL.Var a -> SPL.Var a
  {- Arity: 1, Strictness: <L,1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.|+|} True True} SPL.liftV2
                                                                                  @ a
                                                                                  @ a
                                                                                  @ a
                                                                                  (GHC.Num.+
                                                                                     @ a
                                                                                     $dNum)) -}
ac8c15bca1f51f0a4b377a4e5d3a9ace
  (|:|) :: SPL.Var a -> SPL.Var [a] -> SPL.Var [a]
  {- Unfolding: (\ @ a ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.|:|} True True} SPL.liftV2
                                                                                  @ a
                                                                                  @ [a]
                                                                                  @ [a]
                                                                                  (GHC.Types.:
                                                                                     @ a)) -}
2e7170d7e595cb2510f60d0f555c2a10
  (|==|) ::
    GHC.Classes.Eq a =>
    SPL.Var a -> SPL.Var a -> SPL.Var GHC.Types.Bool
  {- Arity: 1, Strictness: <L,1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) ->
                 {__scc {SPL-0.1.0.0-1gMIn6ueMVA5fHj2IG3fJG:SPL.|==|} True True} SPL.liftV2
                                                                                   @ a
                                                                                   @ a
                                                                                   @ GHC.Types.Bool
                                                                                   (GHC.Classes.==
                                                                                      @ a
                                                                                      $dEq)) -}
instance GHC.Base.Applicative [SPL.Var] = SPL.$fApplicativeVar
instance GHC.Classes.Eq [SPL.Var] = SPL.$fEqVar
instance GHC.Base.Functor [SPL.Var] = SPL.$fFunctorVar
instance GHC.Classes.Ord [SPL.Var] = SPL.$fOrdVar
instance GHC.Show.Show [SPL.Var] = SPL.$fShowVar
"SC:getAllConfigs0" [ALWAYS] forall (sc :: Cudd.Cudd.DDNode)
                                    (sc1 :: [Cudd.Cudd.DDNode])
  SPL.getAllConfigs (GHC.Types.: @ PropBDD.Prop sc sc1)
  = SPL.getAllConfigs_$sgetAllConfigs sc sc1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

